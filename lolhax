local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "mspaint",
    Footer = "version: example",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("主要功能", "house"),
    ESP = Window:AddTab("透视", "eye"),
    Hacks = Window:AddTab("外挂", "shield"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local MainLeftGroup = Tabs.Main:AddLeftGroupbox("自动功能")
local MainRightGroup = Tabs.Main:AddRightGroupbox("玩家功能")
local HacksLeftGroup = Tabs.Hacks:AddLeftGroupbox("实体防护")
local HacksRightGroup = Tabs.Hacks:AddRightGroupbox("玩家功能")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ProximityPromptService = game:GetService("ProximityPromptService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local RANGE = 12.5
local INTERVAL = 0.1

local fireOk = pcall(function()
    fireproximityprompt(Instance.new("ProximityPrompt"))
end)

local autoInteractEnabled = false
local autoInteractConnection = nil

local function firePrompt(prompt)
    if not (prompt and prompt.Enabled) then return end
    if fireOk and fireproximityprompt then
        fireproximityprompt(prompt)
    else
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration or 0)
        prompt:InputHoldEnd()
    end
end

local ignoredNames = {
    HidePrompt = true, ClimbPrompt = true, PushPrompt = true,
    InteractPrompt = true, PropPrompt = true,
    StarRiftPrompt = true, RiftPrompt = true
}
local ignoredParents = {
    Padlock = true, Seek_Arm = true, KeyObtainFake = true
}

local lastCheck = 0

local function onHeartbeat(dt)
    if not autoInteractEnabled then return end
    
    lastCheck = lastCheck + dt
    if lastCheck < INTERVAL then return end
    lastCheck = 0

    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local pos = hrp.Position

    for _, prompt in ipairs(Workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled
           and not ignoredNames[prompt.Name]
           and not ignoredParents[prompt.Parent and prompt.Parent.Name or ""] then
            
            local part = prompt.Parent
            if part:IsA("Model") then 
                part = part:FindFirstChildWhichIsA("BasePart") 
                if not part then continue end
            end
            
            if part:IsA("BasePart") and (part.Position - pos).Magnitude <= RANGE then
                firePrompt(prompt)
            end
        end
    end
end

local function toggleAutoInteract(state)
    autoInteractEnabled = state
    if state then
        if autoInteractConnection then
            autoInteractConnection:Disconnect()
        end
        autoInteractConnection = RunService.Heartbeat:Connect(onHeartbeat)
    elseif autoInteractConnection then
        autoInteractConnection:Disconnect()
        autoInteractConnection = nil
    end
end

local brightnessEnabled = false
local originalProperties = {}
local brightnessConnection = nil

local function saveOriginalProperties()
    originalProperties.GlobalShadows = Lighting.GlobalShadows
    originalProperties.Brightness = Lighting.Brightness
    originalProperties.ClockTime = Lighting.ClockTime
    originalProperties.FogEnd = Lighting.FogEnd
    originalProperties.OutdoorAmbient = Lighting.OutdoorAmbient
    originalProperties.ExposureCompensation = Lighting.ExposureCompensation
end

local function applyBrightnessImmediately()
    Lighting.GlobalShadows = false
    Lighting.Brightness = 6
    Lighting.ClockTime = 14
    Lighting.FogEnd = 1e6
    Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
    Lighting.ExposureCompensation = 0.25
end

local function setBrightness(state)
    brightnessEnabled = state
    if state then
        saveOriginalProperties()
        applyBrightnessImmediately()
        
        if brightnessConnection then
            brightnessConnection:Disconnect()
        end
        brightnessConnection = RunService.RenderStepped:Connect(function()
            applyBrightnessImmediately()
        end)
    else
        if brightnessConnection then
            brightnessConnection:Disconnect()
            brightnessConnection = nil
        end
        
        if originalProperties.GlobalShadows ~= nil then
            Lighting.GlobalShadows = originalProperties.GlobalShadows
            Lighting.Brightness = originalProperties.Brightness
            Lighting.ClockTime = originalProperties.ClockTime
            Lighting.FogEnd = originalProperties.FogEnd
            Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
            Lighting.ExposureCompensation = originalProperties.ExposureCompensation
        end
    end
end

local AutoInteractToggle = MainLeftGroup:AddToggle("AutoInteract", {
    Text = "自动互动",
    Default = false,
    Callback = toggleAutoInteract
})

AutoInteractToggle:AddKeyPicker("AutoInteractKey", {
    Default = "R",
    NoUI = false,
    Text = "自动互动快捷键",
    Callback = function(key)
        if key == "R" then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        end
    end
})

local speedEnabled = false
local targetSpeed = 18
local speedConnection = nil

local function applySpeed(character)
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = targetSpeed
    end
end

local function onCharacterAdded(character)
    if speedEnabled then
        applySpeed(character)
    end
end

local function toggleSpeed(state)
    speedEnabled = state
    if state then
        if speedConnection then
            speedConnection:Disconnect()
        end
        
        if player.Character then
            applySpeed(player.Character)
        end
        
        speedConnection = player.CharacterAdded:Connect(onCharacterAdded)
        
        speedConnection = RunService.Heartbeat:Connect(function()
            if player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.WalkSpeed ~= targetSpeed then
                    humanoid.WalkSpeed = targetSpeed
                end
            end
        end)
    elseif speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
        
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end
end

local speedSlider = MainLeftGroup:AddSlider('SpeedValue', {
    Text = '速度值',
    Default = 18,
    Min = 16,
    Max = 22,
    Rounding = 0,
    Compact = false,
})

speedSlider:OnChanged(function()
    targetSpeed = speedSlider.Value
    if speedEnabled and player.Character then
        applySpeed(player.Character)
    end
end)

local SpeedToggle = MainLeftGroup:AddToggle('SpeedBoost', {
    Text = '速度提升',
    Default = false,
    Tooltip = '提升移动速度'
})

SpeedToggle:OnChanged(function()
    toggleSpeed(SpeedToggle.Value)
end)

SpeedToggle:AddKeyPicker("SpeedBoostKey", {
    Default = "T",
    NoUI = false,
    Text = "速度提升快捷键",
    Callback = function(key)
        if key == "T" then
            Toggles.SpeedBoost:SetValue(not Toggles.SpeedBoost.Value)
        end
    end
})

local jumpConnections = {}

local function setupJump()
    for _, conn in ipairs(jumpConnections) do
        conn:Disconnect()
    end
    jumpConnections = {}
    
    local char = player.Character
    if not char then return end
    
    char:SetAttribute("CanJump", true)
    
    local function fix()
        char:SetAttribute("CanJump", true)
    end
    
    table.insert(jumpConnections, char:GetAttributeChangedSignal("CanJump"):Connect(fix))
    table.insert(jumpConnections, player.CharacterAdded:Connect(function(newChar)
        newChar:WaitForChild("Collision", 9e9)
        newChar:SetAttribute("CanJump", true)
        table.insert(jumpConnections, newChar:GetAttributeChangedSignal("CanJump"):Connect(function()
            newChar:SetAttribute("CanJump", true)
        end))
    end))
end

local JumpToggle = MainRightGroup:AddToggle('JumpButton', {
    Text = '强制跳跃',
    Default = false,
    Tooltip = '强制启用跳跃属性'
})

JumpToggle:OnChanged(function()
    if JumpToggle.Value then
        setupJump()
    else
        for _, conn in ipairs(jumpConnections) do
            conn:Disconnect()
        end
        jumpConnections = {}
        if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
            player.Character:SetAttribute("CanJump", false)
        end
    end
end)

JumpToggle:AddKeyPicker("JumpButtonKey", {
    Default = "J",
    NoUI = false,
    Text = "强制跳跃快捷键",
    Callback = function(key)
        if key == "J" then
            Toggles.JumpButton:SetValue(not Toggles.JumpButton.Value)
        end
    end
})

local BrightnessToggle = MainRightGroup:AddToggle("Brightness", {
    Text = "高亮",
    Default = false,
    Callback = setBrightness
})

BrightnessToggle:AddKeyPicker("BrightnessKey", {
    Default = "B",
    NoUI = false,
    Text = "高亮快捷键",
    Callback = function(key)
        if key == "B" then
            Toggles.Brightness:SetValue(not Toggles.Brightness.Value)
        end
    end
})

local HotelGroup = Tabs.ESP:AddLeftGroupbox("酒店")
local MineGroup = Tabs.ESP:AddRightGroupbox("矿井")
local BackdoorGroup = Tabs.ESP:AddLeftGroupbox("后门")
local OutdoorGroup = Tabs.ESP:AddRightGroupbox("户外")
local GeneralGroup = Tabs.ESP:AddLeftGroupbox("通用")

HotelGroup:AddDivider()
MineGroup:AddDivider()
BackdoorGroup:AddDivider()
OutdoorGroup:AddDivider()
GeneralGroup:AddDivider()

local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")

local COL = {
    Entity = Color3.fromRGB(255, 50, 50),
    Door = Color3.fromRGB(0, 200, 255),
    Key = Color3.fromRGB(0, 255, 0),
    Hide = Color3.fromRGB(255, 255, 0),
    Book = Color3.fromRGB(255, 100, 255),
    Lever = Color3.fromRGB(255, 165, 0),
    Breaker = Color3.fromRGB(255, 0, 200),
    Timer = Color3.fromRGB(0, 255, 255),
    Gen = Color3.fromRGB(255, 200, 0),
    Fuse = Color3.fromRGB(255, 255, 0),
    Chest = Color3.fromRGB(255, 215, 0),
    Gold = Color3.fromRGB(255, 215, 0),
    Player = Color3.fromRGB(0, 255, 255),
    Item = Color3.fromRGB(200, 200, 200),
    Anchor = Color3.fromRGB(255, 215, 0),
    EKey = Color3.fromRGB(0, 255, 0),
    Pump = Color3.fromRGB(255, 200, 0),
    ElectricalKey = Color3.fromRGB(0, 200, 200)
}

local ITEM_SET = {
    "Flashlight","Lockpick","Vitamins","Bandage","StarVial","StarBottle","StarJug",
    "Shakelight","Straplight","Bulklight","Battery","Candle","Crucifix","CrucifixWall",
    "Glowsticks","SkeletonKey","Candy","ShieldMini","ShieldBig","BandagePack","BatteryPack",
    "RiftCandle","LaserPointer","HolyGrenade","Shears","Smoothie","Cheese","Bread",
    "AlarmClock","RiftSmoothie","GweenSoda","GlitchCub","ElectricalKeyObtain"
}
local ITEM_MAP = {}
for _,v in ipairs(ITEM_SET) do ITEM_MAP[v]=true end

local ENTITY_NAME_MAP = {
    RushMoving = "Rush",
    AmbushMoving = "Ambush",
    A60 = "A-60",
    A120 = "A-120",
    BackdoorRush = "Backdoor Rush",
    SallyWindow = "Sally",
    JeffTheKiller = "Jeff",
    GrumbleRig = "Grumble",
    GiggleCeiling = "Giggle",
    Snare = "Snare",
    FigureRig = "Figure",
    FigureRagdoll = "Figure Ragdoll",
    BananaPeel = "Banana Peel",
    SeekMovingNewClone = "Seek",
    SeekMoving = "Seek",
    GlitchRush = "Glitch Rush",
    Eyes = "Eyes",
    GlitchAmbush = "Glitch Ambush",
    BackdoorLookman = "Lookman",
    Screech = "Screech",
    GlitchedScreech = "Glitched Screech"
}

if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

local function currentRoom()
    return CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
end

local function createTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function isInPlayerHand(obj)
    if not obj then return false end
    if obj:IsA("Tool") then
        local parent = obj.Parent
        if parent and (parent:IsA("Model") or parent:IsA("Backpack")) then
            if parent:IsA("Model") and Players:GetPlayerFromCharacter(parent) then
                return true
            elseif parent:IsA("Backpack") then
                return true
            end
        end
    end
    local current = obj
    while current and current ~= workspace do
        if current:IsA("Model") and Players:GetPlayerFromCharacter(current) then
            return true
        end
        current = current.Parent
    end
    return false
end

local tracerESPs = {}
local tracerEnabled = false
local tracerConnection = nil

local function updateTracers()
    if not tracerConnection and tracerEnabled then
        tracerConnection = RunService.RenderStepped:Connect(function()
            if not tracerEnabled then
                tracerConnection:Disconnect()
                tracerConnection = nil
                return
            end
            
            local camera = workspace.CurrentCamera
            if not camera then return end
            
            for obj, data in pairs(tracerESPs) do
                if obj and obj.Parent and data.tracer then
                    local part = obj:IsA("BasePart") and obj or obj:FindFirstChildWhichIsA("BasePart")
                    if part then
                        local screenPos, onScreen = camera:WorldToViewportPoint(part.Position)
                        if onScreen then
                            data.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                            data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                            data.tracer.Visible = true
                        else
                            data.tracer.Visible = false
                        end
                    else
                        data.tracer.Visible = false
                    end
                else
                    if data and data.tracer then
                        data.tracer.Visible = false
                    end
                end
            end
        end)
    elseif not tracerEnabled and tracerConnection then
        tracerConnection:Disconnect()
        tracerConnection = nil
        
        for _, data in pairs(tracerESPs) do
            if data.tracer then
                data.tracer.Visible = false
            end
        end
    end
end

local function addESP(obj, text, color, tracerColor)
    if not obj or not obj.Parent then return end
    if isInPlayerHand(obj) then return end
    if obj:FindFirstChild("PureESP") then obj.PureESP:Destroy() end
    local tracer = createTracer()
    tracer.Color = tracerColor or color
    tracerESPs[obj] = {
        object = obj,
        tracer = tracer,
        text = text,
        color = color
    }
    
    if not tracerEnabled then
        tracer.Visible = false
    end
    
    local hl = Instance.new("Highlight")
    hl.Name = "PureESP"
    hl.Adornee = obj
    hl.FillColor = color
    hl.OutlineColor = color
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = obj
    local bg = Instance.new("BillboardGui")
    bg.Name = "PureESP"
    bg.Adornee = obj
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    if obj.Name == "Bed" or obj.Name == "Double_Bed" then
        bg.StudsOffset = Vector3.new(0, 2, 0)
    end
    bg.Parent = obj
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = color
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = text
    txt.Parent = bg
    return hl, bg, tracer
end

local function clearRoomESP(room)
    if not room then return end
    for _,v in ipairs(room:GetDescendants()) do
        if v:FindFirstChild("PureESP") then v.PureESP:Destroy() end
        if tracerESPs[v] and tracerESPs[v].tracer then
            tracerESPs[v].tracer:Remove()
            tracerESPs[v] = nil
        end
    end
end

local ENTITIES = {
    "RushMoving","AmbushMoving","A60","A120","BackdoorRush","SallyWindow","JeffTheKiller","GrumbleRig",
    "GiggleCeiling","Snare","FigureRig","FigureRagdoll","BananaPeel","SeekMovingNewClone","SeekMoving",
    "GlitchRush","Eyes","GlitchAmbush","BackdoorLookman","Screech","GlitchedScreech"
}

local HIDE_SPOTS = {
    "Wardrobe","Rooms_Locker","Backdoor_Wardrobe","Toolshed","Locker_Large",
    "Bed","CircularVent","Rooms_Locker_Fridge","RetroWardrobe","Dumpster","Double_Bed"
}

local EXTRA_ITEMS = {
    {"锚","MinesAnchor",COL.Anchor},
    {"电钥匙","ElectricalKeyObtain",COL.EKey},
    {"水泵","WaterPump",COL.Pump}
}

local function checkAndAddESP(obj)
    if isInPlayerHand(obj) then return end
    if table.find(ENTITIES, obj.Name) and Toggles.EntityESP.Value then
        local displayName = ENTITY_NAME_MAP[obj.Name] or "实体"
        addESP(obj, displayName, COL.Entity)
        return
    end
    if obj.Name == "KeyObtain" and Toggles.KeyESP.Value then
        addESP(obj, "钥匙", COL.Key)
        return
    end
    if obj.Name == "ElectricalKeyObtain" and Toggles.ElectricalKeyESP.Value then
        addESP(obj, "电气室钥匙", COL.ElectricalKey)
        return
    end
    if table.find(HIDE_SPOTS, obj.Name) and Toggles.ContainerESP.Value then
        if obj.Name == "Bed" or obj.Name == "Double_Bed" then
            addESP(obj, "床", COL.Hide)
        else
            addESP(obj, "柜子", COL.Hide)
        end
        return
    end
    if obj:IsA("Model") and obj.Name == "LiveHintBook" and Toggles.BookESP.Value then
        addESP(obj, "书", COL.Book)
        return
    end
    if obj:IsA("Model") and obj.Name == "LeverForGate" and Toggles.LeverESP.Value then
        addESP(obj, "杠杆", COL.Lever)
        return
    end
    if obj.Name == "LiveBreakerPolePickup" and Toggles.BreakerESP.Value then
        addESP(obj, "断路器", COL.Breaker)
        return
    end
    if obj.Name == "TimerLever" and Toggles.TimerESP.Value then
        addESP(obj, "定时器", COL.Timer)
        return
    end
    if obj.Name == "MinesGenerator" and Toggles.GeneratorESP.Value then
        addESP(obj, "发电机", COL.Gen)
        return
    end
    if obj.Name == "FuseObtain" and Toggles.FuseESP.Value then
        addESP(obj, "保险丝", COL.Fuse)
        return
    end
    if obj.Name == "ChestBox" and Toggles.ChestESP.Value then
        addESP(obj, "宝箱", COL.Chest)
        return
    end
    if obj.Name == "GoldPile" and Toggles.GoldESP.Value then
        addESP(obj, "金币 "..tostring(obj:GetAttribute("GoldValue") or "?"), COL.Gold)
        return
    end
    for _,row in ipairs(EXTRA_ITEMS) do
        if obj.Name == row[2] and Toggles.ExtraItemsESP.Value then
            addESP(obj, row[1], row[3])
            return
        end
    end
    if ITEM_MAP[obj.Name] and Toggles.ItemESP.Value then
        addESP(obj, obj.Name, COL.Item)
        return
    end
end

local currentRoomListener = nil

local function setupRoomListener(room)
    if currentRoomListener then
        currentRoomListener:Disconnect()
        currentRoomListener = nil
    end
    if not room then return end
    for _, obj in ipairs(room:GetDescendants()) do
        checkAndAddESP(obj)
    end
    currentRoomListener = room.DescendantAdded:Connect(checkAndAddESP)
end

local function initializeESP()
    local room = currentRoom()
    if room then
        setupRoomListener(room)
    end
end

initializeESP()

LatestRoomVal:GetPropertyChangedSignal("Value"):Connect(function()
    clearRoomESP(currentRoom())
    initializeESP()
end)

HotelGroup:AddToggle("EntityESP", {Text = "实体", Default = false})
HotelGroup:AddToggle("KeyESP", {Text = "钥匙", Default = false})
HotelGroup:AddToggle("ContainerESP", {Text = "容器", Default = false})
HotelGroup:AddToggle("BookESP", {Text = "书籍", Default = false})
HotelGroup:AddToggle("LeverESP", {Text = "杠杆", Default = false})
HotelGroup:AddToggle("BreakerESP", {Text = "断路器", Default = false})
HotelGroup:AddToggle("TimerESP", {Text = "定时器", Default = false})

MineGroup:AddToggle("GeneratorESP", {Text = "发电机", Default = false})
MineGroup:AddToggle("FuseESP", {Text = "保险丝", Default = false})
MineGroup:AddToggle("ChestESP", {Text = "宝箱", Default = false})
MineGroup:AddToggle("GoldESP", {Text = "金币", Default = false})
MineGroup:AddToggle("AnchorESP", {Text = "锚", Default = false})

BackdoorGroup:AddToggle("ElectricalKeyESP", {Text = "电气钥匙", Default = false})
BackdoorGroup:AddToggle("PumpESP", {Text = "水泵", Default = false})

OutdoorGroup:AddToggle("ItemESP", {Text = "物品", Default = false})
OutdoorGroup:AddToggle("ExtraItemsESP", {Text = "额外物品", Default = false})

local TracerToggle = GeneralGroup:AddToggle("TracerESP", {
    Text = "透视线条",
    Default = false,
    Callback = function(state)
        tracerEnabled = state
        updateTracers()
    end
})

TracerToggle:AddKeyPicker("TracerESPKey", {
    Default = "Y",
    NoUI = false,
    Text = "透视线条快捷键",
    Callback = function(key)
        if key == "Y" then
            Toggles.TracerESP:SetValue(not Toggles.TracerESP.Value)
        end
    end
})

local screechCon
local AntiScreechToggle = HacksLeftGroup:AddToggle("AntiScreech", {
    Text = "移除尖叫声",
    Default = false,
    Callback = function(state)
        if state then
            for _, v in ipairs(workspace.CurrentCamera:GetChildren()) do
                if v.Name == "GlitchedScreech" then v:Destroy() end
            end
            screechCon = workspace.CurrentCamera.ChildAdded:Connect(function(child)
                if child.Name == "GlitchedScreech" then child:Destroy() end
            end)

            local mods = player.PlayerGui
                :WaitForChild("MainUI")
                :WaitForChild("Initiator")
                :WaitForChild("Main_Game")
                :WaitForChild("RemoteListener")
                :WaitForChild("Modules")
            local mod = mods:FindFirstChild("Screech") or mods:FindFirstChild("_Screech")
            if mod then mod.Name = "_Screech" end
        elseif screechCon then
            screechCon:Disconnect()
            screechCon = nil
        end
    end
})

local AntiDreadToggle = HacksLeftGroup:AddToggle("AntiDread", {
    Text = "移除恐惧",
    Default = false,
    Callback = function(state)
        if state then
            local mods = player.PlayerGui
                :WaitForChild("MainUI")
                :WaitForChild("Initiator")
                :WaitForChild("Main_Game")
                :WaitForChild("RemoteListener")
                :WaitForChild("Modules")
            local mod = mods:FindFirstChild("Dread") or mods:FindFirstChild("_Dread")
            if mod then mod.Name = "_Dread" end
        end
    end
})

local hearingCon
local AntiFigureToggle = HacksLeftGroup:AddToggle("AntiFigure", {
    Text = "反Figure听力",
    Default = false,
    Callback = function(state)
        if state then
            local THROTTLE = 0.02
            local acc = 0
            hearingCon = RunService.Heartbeat:Connect(function(dt)
                acc = acc + dt
                if acc < THROTTLE then return end
                acc = 0
                local remotes = ReplicatedStorage:FindFirstChild("RemotesFolder")
                remotes = remotes and remotes:FindFirstChild("Crouch")
                if remotes then remotes:FireServer(true) end
            end)
        elseif hearingCon then
            hearingCon:Disconnect()
            hearingCon = nil
        end
    end
})

local AntiA90Toggle = HacksLeftGroup:AddToggle("AntiA90", {
    Text = "移除A90",
    Default = false,
    Callback = function(state)
        if state then
            local mods = player.PlayerGui
                :WaitForChild("MainUI")
                :WaitForChild("Initiator")
                :WaitForChild("Main_Game")
                :WaitForChild("RemoteListener")
                :WaitForChild("Modules")
            local mod = mods:FindFirstChild("A90") or mods:FindFirstChild("_A90")
            if mod then mod.Name = "_A90" end
        end
    end
})

local eyesCon
local AntiEyesToggle = HacksLeftGroup:AddToggle("AntiEyes", {
    Text = "反Eyes",
    Default = false,
    Callback = function(state)
        if state then
            local Remotes
            if ReplicatedStorage:FindFirstChild("EntityInfo") then
                Remotes = ReplicatedStorage.EntityInfo
            else
                Remotes = ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
            end
            local motor = Remotes:FindFirstChild("MotorReplication")
            if motor then
                eyesCon = RunService.Heartbeat:Connect(function()
                    if Workspace:FindFirstChild("Eys") then motor:FireServer(-760) end
                end)
            end
        elseif eyesCon then
            eyesCon:Disconnect()
            eyesCon = nil
        end
    end
})

local lookmanCon
local AntiLookmanToggle = HacksLeftGroup:AddToggle("AntiLookman", {
    Text = "反Lookman",
    Default = false,
    Callback = function(state)
        if state then
            local Remotes
            if ReplicatedStorage:FindFirstChild("EntityInfo") then
                Remotes = ReplicatedStorage.EntityInfo
            else
                Remotes = ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
            end
            local motor = Remotes:FindFirstChild("MotorReplication")
            if motor then
                lookmanCon = RunService.Heartbeat:Connect(function()
                    if Workspace:FindFirstChild("BackdoorLookman") then
                        motor:FireServer(-760)
                    end
                end)
            end
        elseif lookmanCon then
            lookmanCon:Disconnect()
            lookmanCon = nil
        end
    end
})

local NoclipConnection
local NoclipToggle = HacksRightGroup:AddToggle("Noclip", {
    Text = "穿墙",
    Default = false,
    Callback = function(state)
        if state then
            local NoclipIgnoreTable = {
                "Collision","CollisionClone1","CollisionClone2",
                "CollisionClone3","CollisionClone4","CollisionClone5"
            }
            local function isIgnored(part)
                return table.find(NoclipIgnoreTable, part.Name)
            end

            NoclipConnection = RunService.Heartbeat:Connect(function()
                local char = player.Character or player.CharacterAdded:Wait()
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if not isIgnored(part) and part.Name ~= "CollisionCrouch" then
                            part.CanCollide = false
                        elseif part.Name == "CollisionCrouch" then
                            part.CanCollide = (part.CollisionGroup == "PlayerCrouching")
                        end
                    end
                end
            end)
        elseif NoclipConnection then
            NoclipConnection:Disconnect()
            NoclipConnection = nil
        end
    end
})

local listeners = {}
local settings = {
    ["移除-Snare"]    = { "Snare",            "room" },
    ["移除-Dupe"]     = { "SideroomDupe",     "room" },
    ["移除-SeekArm"]  = { "Seek_Arm",         "room" },
    ["移除-SeekFire"] = { "ChandelierObstruction", "room" }
}

local function getCurrentRoom()
    local roomName = tostring(LatestRoomVal.Value)
    local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
    return roomsFolder and roomsFolder:FindFirstChild(roomName)
end

local function disableTransmitters(inst)
    pcall(function() inst:Destroy() end)
end

local function setupRemoval(root, targetName)
    if not root or not root:IsDescendantOf(Workspace) then return nil end
    for _, inst in ipairs(root:GetDescendants()) do
        if inst.Name == targetName then disableTransmitters(inst) end
    end
    return root.DescendantAdded:Connect(function(inst)
        if inst.Name == targetName then disableTransmitters(inst) end
    end)
end

local RemoveObjectsToggle = HacksRightGroup:AddToggle("RemoveObjects", {
    Text = "移除房间物体",
    Default = false,
    Callback = function(state)
        if state then
            for _, spec in pairs(settings) do
                local targetName, scope = spec[1], spec[2]
                local root = (scope == "global") and Workspace or getCurrentRoom()
                if root then
                    local conn = setupRemoval(root, targetName)
                    if conn then listeners[targetName] = { conn = conn, root = root } end
                end
            end

            LatestRoomVal:GetPropertyChangedSignal("Value"):Connect(function()
                for _, data in pairs(listeners) do
                    if data.conn then data.conn:Disconnect() end
                end
                table.clear(listeners)

                for _, spec in pairs(settings) do
                    local targetName, scope = spec[1], spec[2]
                    local root = (scope == "global") and Workspace or getCurrentRoom()
                    if root then
                        local conn = setupRemoval(root, targetName)
                        if conn then listeners[targetName] = { conn = conn, root = root } end
                    end
                end
            end)
        else
            for _, data in pairs(listeners) do
                if data.conn then data.conn:Disconnect() end
            end
            table.clear(listeners)
        end
    end
})

local NoSlowDownToggle = HacksRightGroup:AddToggle("NoSlowDown", {
    Text = "无减速",
    Default = false,
    Callback = function(state)
        if state then
            local char = player.Character or player.CharacterAdded:Wait()
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    local old = part.CustomPhysicalProperties
                    part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
                end
            end
            
            player.CharacterAdded:Connect(function(newChar)
                for _, part in ipairs(newChar:GetDescendants()) do
                    if part:IsA("BasePart") then
                        local old = part.CustomPhysicalProperties
                        part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
                    end
                end
            end)
        end
    end
})

local speedBypassEnabled = false
local speedBypassConnection = nil
local collisionClone = nil
local speedBypassToggle = HacksRightGroup:AddToggle("SpeedBypass", {
    Text = "速度绕过",
    Default = false,
    Callback = function(state)
        speedBypassEnabled = state
        if state then
            local function initCollisionClone()
                if collisionClone then
                    collisionClone:Destroy()
                end
                
                local character = player.Character
                if not character or not character:FindFirstChild("Collision") then
                    return false
                end
                
                collisionClone = character.Collision:Clone()
                collisionClone.Name = "_CollisionClone"
                collisionClone.Massless = true
                collisionClone.Parent = character
                collisionClone.CanCollide = false
                collisionClone.CanQuery = false
                collisionClone.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
                
                return true
            end
            
            if not initCollisionClone() then
                Toggles.SpeedBypass:SetValue(false)
                return
            end
            
            speedSlider:SetMax(35)
            
            speedBypassConnection = RunService.Heartbeat:Connect(function()
                if not speedBypassEnabled or not collisionClone then 
                    return 
                end
                
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = player.Character.HumanoidRootPart
                    if rootPart.Anchored then
                        collisionClone.Massless = true
                    else
                        collisionClone.Massless = not collisionClone.Massless
                    end
                end
            end)
        else
            if speedBypassConnection then
                speedBypassConnection:Disconnect()
                speedBypassConnection = nil
            end
            
            if collisionClone then
                collisionClone:Destroy()
                collisionClone = nil
            end
            
            speedSlider:SetMax(22)
            
            if speedEnabled and player.Character then
                applySpeed(player.Character)
            end
        end
    end
})

player.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    character:WaitForChild("Collision")
    
    if Toggles.SpeedBypass.Value then
        Toggles.SpeedBypass:SetValue(false)
        Toggles.SpeedBypass:SetValue(true)
    end
end)

player.CharacterRemoving:Connect(function()
    if collisionClone then
        collisionClone:Destroy()
        collisionClone = nil
    end
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

ThemeManager:SetFolder("mspaint")
SaveManager:SetFolder("mspaint")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()
-- 确保所有服务都已获取
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- 确保所有全局变量都已定义
local player = Players.LocalPlayer
local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")

-- 确保所有功能都已正确初始化
if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

-- 确保所有连接都已正确管理
local connections = {}
local function addConnection(conn)
    table.insert(connections, conn)
end

local function cleanupConnections()
    for _, conn in ipairs(connections) do
        if conn then
            pcall(function() conn:Disconnect() end)
        end
    end
    connections = {}
end

-- 确保UI设置正确加载
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
ThemeManager:SetFolder("mspaint")
SaveManager:SetFolder("mspaint")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

-- 确保所有功能在脚本卸载时正确清理
Library.Unloaded:Connect(function()
    cleanupConnections()
    
    -- 清理所有高亮效果
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:FindFirstChild("PureESP") then
            obj.PureESP:Destroy()
        end
    end
    
    -- 清理所有绘制线条
    for _, data in pairs(tracerESPs) do
        if data and data.tracer then
            pcall(function() data.tracer:Remove() end)
        end
    end
    tracerESPs = {}
    
    -- 恢复原始亮度设置
    if originalProperties.GlobalShadows ~= nil then
        Lighting.GlobalShadows = originalProperties.GlobalShadows
        Lighting.Brightness = originalProperties.Brightness
        Lighting.ClockTime = originalProperties.ClockTime
        Lighting.FogEnd = originalProperties.FogEnd
        Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
        Lighting.ExposureCompensation = originalProperties.ExposureCompensation
    end
    
    -- 恢复原始速度
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
    
    -- 清理碰撞克隆体
    if collisionClone then
        collisionClone:Destroy()
    end
end)

-- 确保角色变化时所有功能正确重置
player.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    character:WaitForChild("Collision")
    
    -- 重新初始化速度绕过
    if Toggles.SpeedBypass.Value then
        Toggles.SpeedBypass:SetValue(false)
        task.wait(0.5)
        Toggles.SpeedBypass:SetValue(true)
    end
    
    -- 重新初始化强制跳跃
    if Toggles.JumpButton.Value then
        Toggles.JumpButton:SetValue(false)
        task.wait(0.5)
        Toggles.JumpButton:SetValue(true)
    end
    
    -- 重新初始化速度提升
    if Toggles.SpeedBoost.Value then
        Toggles.SpeedBoost:SetValue(false)
        task.wait(0.5)
        Toggles.SpeedBoost:SetValue(true)
    end
    
    -- 重新初始化无减速
    if Toggles.NoSlowDown.Value then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                local old = part.CustomPhysicalProperties
                part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
            end
        end
    end
end)

-- 确保所有键盘快捷键正常工作
local keybindConnections = {}
local function setupKeybinds()
    -- 清理旧连接
    for _, conn in ipairs(keybindConnections) do
        conn:Disconnect()
    end
    keybindConnections = {}
    
    -- 设置新的键盘监听
    local inputBeganConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.R then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        elseif input.KeyCode == Enum.KeyCode.T then
            Toggles.SpeedBoost:SetValue(not Toggles.SpeedBoost.Value)
        elseif input.KeyCode == Enum.KeyCode.J then
            Toggles.JumpButton:SetValue(not Toggles.JumpButton.Value)
        elseif input.KeyCode == Enum.KeyCode.B then
            Toggles.Brightness:SetValue(not Toggles.Brightness.Value)
        elseif input.KeyCode == Enum.KeyCode.Y then
            Toggles.TracerESP:SetValue(not Toggles.TracerESP.Value)
        end
    end)
    
    table.insert(keybindConnections, inputBeganConnection)
end

setupKeybinds()

-- 确保UI重新加载时重新设置键盘快捷键
Library.ConfigClosed:Connect(function()
    task.wait(0.1)
    setupKeybinds()
end)

-- 确保所有功能在游戏关闭时正确清理
game:BindToClose(function()
    Library.Unloaded:Fire()
end)

print("mspaint脚本加载完成!")