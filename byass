local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "mspaint",
    Footer = "version: example",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    ESP = Window:AddTab("ESP", "eye"),
    Cheats = Window:AddTab("Cheats", "shield"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local MainLeftGroup = Tabs.Main:AddLeftGroupbox("Auto Features")
local MainRightGroup = Tabs.Main:AddRightGroupbox("Player Features")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ProximityPromptService = game:GetService("ProximityPromptService")

local player = Players.LocalPlayer
local RANGE = 12.5
local INTERVAL = 0.1

local fireOk = pcall(function()
    fireproximityprompt(Instance.new("ProximityPrompt"))
end)

local autoInteractEnabled = false
local autoInteractConnection = nil

local function firePrompt(prompt)
    if not (prompt and prompt.Enabled) then return end
    if fireOk and fireproximityprompt then
        fireproximityprompt(prompt)
    else
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration or 0)
        prompt:InputHoldEnd()
    end
end

local ignoredNames = {
    HidePrompt = true, ClimbPrompt = true, PushPrompt = true,
    InteractPrompt = true, PropPrompt = true,
    StarRiftPrompt = true, RiftPrompt = true
}
local ignoredParents = {
    Padlock = true, Seek_Arm = true, KeyObtainFake = true
}

local lastCheck = 0

local function onHeartbeat(dt)
    if not autoInteractEnabled then return end
    
    lastCheck = lastCheck + dt
    if lastCheck < INTERVAL then return end
    lastCheck = 0

    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local pos = hrp.Position

    for _, prompt in ipairs(Workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled
           and not ignoredNames[prompt.Name]
           and not ignoredParents[prompt.Parent and prompt.Parent.Name or ""] then
            
            local part = prompt.Parent
            if part:IsA("Model") then 
                part = part:FindFirstChildWhichIsA("BasePart") 
                if not part then continue end
            end
            
            if part:IsA("BasePart") and (part.Position - pos).Magnitude <= RANGE then
                firePrompt(prompt)
            end
        end
    end
end

local function toggleAutoInteract(state)
    autoInteractEnabled = state
    if state then
        if autoInteractConnection then
            autoInteractConnection:Disconnect()
        end
        autoInteractConnection = RunService.Heartbeat:Connect(onHeartbeat)
    elseif autoInteractConnection then
        autoInteractConnection:Disconnect()
        autoInteractConnection = nil
    end
end

local Lighting = game:GetService("Lighting")
local brightnessEnabled = false
local originalProperties = {}
local brightnessConnection = nil

local function saveOriginalProperties()
    originalProperties.GlobalShadows = Lighting.GlobalShadows
    originalProperties.Brightness = Lighting.Brightness
    originalProperties.ClockTime = Lighting.ClockTime
    originalProperties.FogEnd = Lighting.FogEnd
    originalProperties.OutdoorAmbient = Lighting.OutdoorAmbient
    originalProperties.ExposureCompensation = Lighting.ExposureCompensation
end

local function applyBrightnessImmediately()
    Lighting.GlobalShadows = false
    Lighting.Brightness = 6
    Lighting.ClockTime = 14
    Lighting.FogEnd = 1e6
    Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
    Lighting.ExposureCompensation = 0.25
end

local function setBrightness(state)
    brightnessEnabled = state
    if state then
        saveOriginalProperties()
        applyBrightnessImmediately()
        
        if brightnessConnection then
            brightnessConnection:Disconnect()
        end
        brightnessConnection = RunService.RenderStepped:Connect(function()
            applyBrightnessImmediately()
        end)
    else
        if brightnessConnection then
            brightnessConnection:Disconnect()
            brightnessConnection = nil
        end
        
        if originalProperties.GlobalShadows ~= nil then
            Lighting.GlobalShadows = originalProperties.GlobalShadows
            Lighting.Brightness = originalProperties.Brightness
            Lighting.ClockTime = originalProperties.ClockTime
            Lighting.FogEnd = originalProperties.FogEnd
            Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
            Lighting.ExposureCompensation = originalProperties.ExposureCompensation
        end
    end
end

local AutoInteractToggle = MainLeftGroup:AddToggle("AutoInteract", {
    Text = "Auto Interact",
    Default = false,
    Callback = toggleAutoInteract
})

AutoInteractToggle:AddKeyPicker("AutoInteractKey", {
    Default = "R",
    NoUI = false,
    Text = "Auto Interact Keybind",
    Callback = function(key)
        if key == "R" then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        end
    end
})

local speedEnabled = false
local targetSpeed = 18
local speedConnection = nil

local function applySpeed(character)
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = targetSpeed
    end
end

local function onCharacterAdded(character)
    if speedEnabled then
        applySpeed(character)
    end
end

local function toggleSpeed(state)
    speedEnabled = state
    if state then
        if speedConnection then
            speedConnection:Disconnect()
        end
        
        if player.Character then
            applySpeed(player.Character)
        end
        
        speedConnection = player.CharacterAdded:Connect(onCharacterAdded)
        
        speedConnection = RunService.Heartbeat:Connect(function()
            if player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.WalkSpeed ~= targetSpeed then
                    humanoid.WalkSpeed = targetSpeed
                end
            end
        end)
    elseif speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
        
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end
end

local speedSlider = MainLeftGroup:AddSlider('SpeedValue', {
    Text = 'Speed Value',
    Default = 18,
    Min = 16,
    Max = 22,
    Rounding = 0,
    Compact = false,
})

speedSlider:OnChanged(function()
    targetSpeed = speedSlider.Value
    if speedEnabled and player.Character then
        applySpeed(player.Character)
    end
end)

local speedToggle = MainLeftGroup:AddToggle('SpeedBoost', {
    Text = 'Speed Boost',
    Default = false,
    Tooltip = 'Increase movement speed'
})

speedToggle:OnChanged(function()
    toggleSpeed(speedToggle.Value)
end)

local jumpLoop = nil
local jumpConnections = {}

local function setupJump()
    for _, conn in ipairs(jumpConnections) do
        conn:Disconnect()
    end
    jumpConnections = {}
    
    local char = player.Character
    if not char then return end
    
    char:SetAttribute("CanJump", true)
    
    local function fix()
        char:SetAttribute("CanJump", true)
    end
    
    table.insert(jumpConnections, char:GetAttributeChangedSignal("CanJump"):Connect(fix))
    table.insert(jumpConnections, player.CharacterAdded:Connect(function(newChar)
        newChar:WaitForChild("Collision", 9e9)
        newChar:SetAttribute("CanJump", true)
        table.insert(jumpConnections, newChar:GetAttributeChangedSignal("CanJump"):Connect(function()
            newChar:SetAttribute("CanJump", true)
        end))
    end))
end

local jumpToggle = MainRightGroup:AddToggle('JumpButton', {
    Text = 'Force Jump',
    Default = false,
    Tooltip = 'Force enable jump attribute'
})

jumpToggle:OnChanged(function()
    if jumpToggle.Value then
        setupJump()
    else
        for _, conn in ipairs(jumpConnections) do
            conn:Disconnect()
        end
        jumpConnections = {}
        if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
            player.Character:SetAttribute("CanJump", false)
        end
    end
end)

MainRightGroup:AddToggle("Brightness", {
    Text = "Brightness",
    Default = false,
    Callback = setBrightness
})

local ESPGroup = Tabs.ESP:AddLeftGroupbox("ESP Settings")

local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")

local COL = {
    Entity = Color3.fromRGB(255, 50, 50),
    Door = Color3.fromRGB(0, 200, 255),
    Key = Color3.fromRGB(0, 255, 0),
    Hide = Color3.fromRGB(255, 255, 0),
    Book = Color3.fromRGB(255, 100, 255),
    Lever = Color3.fromRGB(255, 165, 0),
    Breaker = Color3.fromRGB(255, 0, 200),
    Timer = Color3.fromRGB(0, 255, 255),
    Gen = Color3.fromRGB(255, 200, 0),
    Fuse = Color3.fromRGB(255, 255, 0),
    Chest = Color3.fromRGB(255, 215, 0),
    Gold = Color3.fromRGB(255, 215, 0),
    Player = Color3.fromRGB(0, 255, 255),
    Item = Color3.fromRGB(200, 200, 200),
    Anchor = Color3.fromRGB(255, 215, 0),
    EKey = Color3.fromRGB(0, 255, 0),
    Pump = Color3.fromRGB(255, 200, 0),
    ElectricalKey = Color3.fromRGB(0, 200, 200)
}

local ITEM_SET = {
    "Flashlight","Lockpick","Vitamins","Bandage","StarVial","StarBottle","StarJug",
    "Shakelight","Straplight","Bulklight","Battery","Candle","Crucifix","CrucifixWall",
    "Glowsticks","SkeletonKey","Candy","ShieldMini","ShieldBig","BandagePack","BatteryPack",
    "RiftCandle","LaserPointer","HolyGrenade","Shears","Smoothie","Cheese","Bread",
    "AlarmClock","RiftSmoothie","GweenSoda","GlitchCub","ElectricalKeyObtain"
}
local ITEM_MAP = {}
for _,v in ipairs(ITEM_SET) do ITEM_MAP[v]=true end

local ENTITY_NAME_MAP = {
    RushMoving = "Rush",
    AmbushMoving = "Ambush",
    A60 = "A-60",
    A120 = "A-120",
    BackdoorRush = "Backdoor Rush",
    SallyWindow = "Sally",
    JeffTheKiller = "Jeff",
    GrumbleRig = "Grumble",
    GiggleCeiling = "Giggle",
    Snare = "Snare",
    FigureRig = "Figure",
    FigureRagdoll = "Figure Ragdoll",
    BananaPeel = "Banana Peel",
    SeekMovingNewClone = "Seek",
    SeekMoving = "Seek",
    GlitchRush = "Glitch Rush",
    Eyes = "Eyes",
    GlitchAmbush = "Glitch Ambush",
    BackdoorLookman = "Lookman",
    Screech = "Screech",
    GlitchedScreech = "Glitched Screech"
}

if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

local function currentRoom()
    return CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
end

local function createTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function isInPlayerHand(obj)
    if not obj then return false end
    if obj:IsA("Tool") then
        local parent = obj.Parent
        if parent and (parent:IsA("Model") or parent:IsA("Backpack")) then
            if parent:IsA("Model") and Players:GetPlayerFromCharacter(parent) then
                return true
            elseif parent:IsA("Backpack") then
                return true
            end
        end
    end
    local current = obj
    while current and current ~= workspace do
        if current:IsA("Model") and Players:GetPlayerFromCharacter(current) then
            return true
        end
        current = current.Parent
    end
    return false
end

local tracerESPs = {}
local tracerEnabled = false

local function addESP(obj, text, color, tracerColor)
    if not obj or not obj.Parent then return end
    if isInPlayerHand(obj) then return end
    if obj:FindFirstChild("PureESP") then obj.PureESP:Destroy() end
    local tracer = createTracer()
    tracer.Color = tracerColor or color
    tracerESPs[obj] = {
        object = obj,
        tracer = tracer,
        text = text,
        color = color
    }
    local hl = Instance.new("Highlight")
    hl.Name = "PureESP"
    hl.Adornee = obj
    hl.FillColor = color
    hl.OutlineColor = color
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = obj
    local bg = Instance.new("BillboardGui")
    bg.Name = "PureESP"
    bg.Adornee = obj
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    if obj.Name == "Bed" or obj.Name == "Double_Bed" then
        bg.StudsOffset = Vector3.new(0, 2, 0)
    end
    bg.Parent = obj
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = color
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = text
    txt.Parent = bg
    return hl, bg, tracer
end

local function clearRoomESP(room)
    if not room then return end
    for _,v in ipairs(room:GetDescendants()) do
        if v:FindFirstChild("PureESP") then v.PureESP:Destroy() end
        if tracerESPs[v] and tracerESPs[v].tracer then
            tracerESPs[v].tracer:Remove()
            tracerESPs[v] = nil
        end
    end
end

local ENTITIES = {
    "RushMoving","AmbushMoving","A60","A120","BackdoorRush","SallyWindow","JeffTheKiller","GrumbleRig",
    "GiggleCeiling","Snare","FigureRig","FigureRagdoll","BananaPeel","SeekMovingNewClone","SeekMoving",
    "GlitchRush","Eyes","GlitchAmbush","BackdoorLookman","Screech","GlitchedScreech"
}

local HIDE_SPOTS = {
    "Wardrobe","Rooms_Locker","Backdoor_Wardrobe","Toolshed","Locker_Large",
    "Bed","CircularVent","Rooms_Locker_Fridge","RetroWardrobe","Dumpster","Double_Bed"
}

local EXTRA_ITEMS = {
    {"锚","MinesAnchor",COL.Anchor},
    {"电钥匙","ElectricalKeyObtain",COL.EKey},
    {"水泵","WaterPump",COL.Pump}
}

local function checkAndAddESP(obj)
    if isInPlayerHand(obj) then return end
    if table.find(ENTITIES, obj.Name) and Toggles.EntityESP.Value then
        local displayName = ENTITY_NAME_MAP[obj.Name] or "Entity"
        addESP(obj, displayName, COL.Entity)
        return
    end
    if obj.Name == "KeyObtain" and Toggles.KeyESP.Value then
        addESP(obj, "Key", COL.Key)
        return
    end
    if obj.Name == "ElectricalKeyObtain" and Toggles.ElectricalKeyESP.Value then
        addESP(obj, "Electrical Key", COL.ElectricalKey)
        return
    end
    if table.find(HIDE_SPOTS, obj.Name) and Toggles.ContainerESP.Value then
        if obj.Name == "Bed" or obj.Name == "Double_Bed" then
            addESP(obj, "Bed", COL.Hide)
        else
            addESP(obj, "Container", COL.Hide)
        end
        return
    end
    if obj:IsA("Model") and obj.Name == "LiveHintBook" and Toggles.BookESP.Value then
        addESP(obj, "Book", COL.Book)
        return
    end
    if obj:IsA("Model") and obj.Name == "LeverForGate" and Toggles.LeverESP.Value then
        addESP(obj, "Lever", COL.Lever)
        return
    end
    if obj.Name == "LiveBreakerPolePickup" and Toggles.BreakerESP.Value then
        addESP(obj, "Breaker", COL.Breaker)
        return
    end
    if obj.Name == "TimerLever" and Toggles.TimerESP.Value then
        addESP(obj, "Timer", COL.Timer)
        return
    end
    if obj.Name == "MinesGenerator" and Toggles.GeneratorESP.Value then
        addESP(obj, "Generator", COL.Gen)
        return
    end
    if obj.Name == "FuseObtain" and Toggles.FuseESP.Value then
        addESP(obj, "Fuse", COL.Fuse)
        return
    end
    if obj.Name == "ChestBox" and Toggles.ChestESP.Value then
        addESP(obj, "Chest", COL.Chest)
        return
    end
    if obj.Name == "GoldPile" and Toggles.GoldESP.Value then
        addESP(obj, "Gold "..tostring(obj:GetAttribute("GoldValue") or "?"), COL.Gold)
        return
    end
    for _,row in ipairs(EXTRA_ITEMS) do
        if obj.Name == row[2] and Toggles.ExtraItemsESP.Value then
            addESP(obj, row[1], row[3])
            return
        end
    end
    if ITEM_MAP[obj.Name] and Toggles.ItemESP.Value then
        addESP(obj, obj.Name, COL.Item)
        return
    end
end

local currentRoomListener = nil

local function setupRoomListener(room)
    if currentRoomListener then
        currentRoomListener:Disconnect()
        currentRoomListener = nil
    end
    if not room then return end
    for _, obj in ipairs(room:GetDescendants()) do
        checkAndAddESP(obj)
    end
    currentRoomListener = room.DescendantAdded:Connect(checkAndAddESP)
end

local function updateTracers()
    if not Workspace.CurrentCamera then return end
    
    for obj, data in pairs(tracerESPs) do
        if obj and obj.Parent and data.tracer then
            local part = obj:IsA("BasePart") and obj or obj:FindFirstChildWhichIsA("BasePart")
            if part then
                local pos = part.Position
                local screenPos, onScreen = Workspace.CurrentCamera:WorldToViewportPoint(pos)
                
                if onScreen and tracerEnabled then
                    data.tracer.From = Vector2.new(Workspace.CurrentCamera.ViewportSize.X / 2, Workspace.CurrentCamera.ViewportSize.Y)
                    data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                    data.tracer.Visible = true
                else
                    data.tracer.Visible = false
                end
            else
                data.tracer.Visible = false
            end
        else
            if data and data.tracer then
                data.tracer:Remove()
            end
            tracerESPs[obj] = nil
        end
    end
end

local tracerConnection = nil
local function toggleTracer(state)
    tracerEnabled = state
    if state then
        if tracerConnection then
            tracerConnection:Disconnect()
        end
        tracerConnection = RunService.RenderStepped:Connect(updateTracers)
    elseif tracerConnection then
        tracerConnection:Disconnect()
        tracerConnection = nil
        
        for _, data in pairs(tracerESPs) do
            if data.tracer then
                data.tracer.Visible = false
            end
        end
    end
end

ESPGroup:AddToggle("TracerESP", {
    Text = "Tracer ESP",
    Default = false,
    Callback = toggleTracer
})

ESPGroup:AddToggle("EntityESP", {
    Text = "Entity ESP",
    Default = false
})

ESPGroup:AddToggle("KeyESP", {
    Text = "Key ESP",
    Default = false
})

ESPGroup:AddToggle("ElectricalKeyESP", {
    Text = "Electrical Key ESP",
    Default = false
})

ESPGroup:AddToggle("ContainerESP", {
    Text = "Container ESP",
    Default = false
})

ESPGroup:AddToggle("BookESP", {
    Text = "Book ESP",
    Default = false
})

ESPGroup:AddToggle("LeverESP", {
    Text = "Lever ESP",
    Default = false
})

ESPGroup:AddToggle("BreakerESP", {
    Text = "Breaker ESP",
    Default = false
})

ESPGroup:AddToggle("TimerESP", {
    Text = "Timer ESP",
    Default = false
})

ESPGroup:AddToggle("GeneratorESP", {
    Text = "Generator ESP",
    Default = false
})

ESPGroup:AddToggle("FuseESP", {
    Text = "Fuse ESP",
    Default = false
})

ESPGroup:AddToggle("ChestESP", {
    Text = "Chest ESP",
    Default = false
})

ESPGroup:AddToggle("GoldESP", {
    Text = "Gold ESP",
    Default = false
})

ESPGroup:AddToggle("ExtraItemsESP", {
    Text = "Extra Items ESP",
    Default = false
})

ESPGroup:AddToggle("ItemESP", {
    Text = "Item ESP",
    Default = false
})

local function initESP()
    local room = currentRoom()
    if room then
        setupRoomListener(room)
    end
    
    LatestRoomVal:GetPropertyChangedSignal("Value"):Connect(function()
        local newRoom = currentRoom()
        if newRoom then
            clearRoomESP(room)
            setupRoomListener(newRoom)
        end
    end)
end

initESP()

local CheatsGroup = Tabs.Cheats:AddLeftGroupbox("Entity Anti-Cheat")
local PlayerGroup = Tabs.Cheats:AddRightGroupbox("Player Features")
local WorldGroup = Tabs.Cheats:AddLeftGroupbox("World Modifications")
local SpeedBypassGroup = Tabs.Cheats:AddRightGroupbox("Speed Bypass")

local Toggles = Library.Toggles
local Options = Library.Options
local LocalPlayer = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

CheatsGroup:AddToggle("AntiScreech", {
    Text = "Remove Screech",
    Default = false,
    Tooltip = "Remove screech sounds from the game"
}):OnChanged(function(value)
    if value then
        for _, v in ipairs(Workspace.CurrentCamera:GetChildren()) do
            if v.Name == "GlitchedScreech" then v:Destroy() end
        end
        screechCon = Workspace.CurrentCamera.ChildAdded:Connect(function(child)
            if child.Name == "GlitchedScreech" then child:Destroy() end
        end)

        local mods = LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("Screech") or mods:FindFirstChild("_Screech")
        if mod then mod.Name = "_Screech" end
    else
        if screechCon then
            screechCon:Disconnect()
            screechCon = nil
        end
    end
end)

CheatsGroup:AddToggle("AntiDread", {
    Text = "Remove Dread",
    Default = false,
    Tooltip = "Remove dread effects from the game"
}):OnChanged(function(value)
    if value then
        local mods = LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("Dread") or mods:FindFirstChild("_Dread")
        if mod then mod.Name = "_Dread" end
    end
end)

CheatsGroup:AddToggle("AntiFigureHearing", {
    Text = "Anti-Figure Hearing",
    Default = false,
    Tooltip = "Continuously crouch to avoid being heard by Figure"
}):OnChanged(function(value)
    if value then
        local THROTTLE = 0.02
        local acc = 0
        hearingCon = RunService.Heartbeat:Connect(function(dt)
            acc = acc + dt
            if acc < THROTTLE then return end
            acc = 0
        end)
    else
        if hearingCon then
            hearingCon:Disconnect()
            hearingCon = nil
        end
    end
end)

CheatsGroup:AddToggle("RemoveA90", {
    Text = "Remove A-90",
    Default = false,
    Tooltip = "Remove A-90 entity from the game"
}):OnChanged(function(value)
    if value then
        local mods = LocalPlayer.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("A90") or mods:FindFirstChild("_A90")
        if mod then mod.Name = "_A90" end
    end
end)

CheatsGroup:AddToggle("AntiEyes", {
    Text = "Anti-Eyes",
    Default = false,
    Tooltip = "Counter Eyes entity"
}):OnChanged(function(value)
    if value then
        local Remotes
        if ReplicatedStorage:FindFirstChild("EntityInfo") then
            Remotes = ReplicatedStorage.EntityInfo
        else
            Remotes = ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
        end
        local motor = Remotes:FindFirstChild("MotorReplication")
        if motor then
            eyesCon = RunService.Heartbeat:Connect(function()
                if Workspace:FindFirstChild("Eyes") then motor:FireServer(-760) end
            end)
        end
    else
        if eyesCon then
            eyesCon:Disconnect()
            eyesCon = nil
        end
    end
end)

CheatsGroup:AddToggle("AntiLookman", {
    Text = "Anti-Lookman",
    Default = false,
    Tooltip = "Counter Lookman entity"
}):OnChanged(function(value)
    if value then
        local Remotes
        if ReplicatedStorage:FindFirstChild("EntityInfo") then
            Remotes = ReplicatedStorage.EntityInfo
        else
            Remotes = ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
        end
        local motor = Remotes:FindFirstChild("MotorReplication")
        if motor then
            lookmanCon = RunService.Heartbeat:Connect(function()
                if Workspace:FindFirstChild("BackdoorLookman") then
                    motor:FireServer(-760)
                end
            end)
        end
    else
        if lookmanCon then
            lookmanCon:Disconnect()
            lookmanCon = nil
        end
    end
end)

PlayerGroup:AddToggle("Noclip", {
    Text = "Noclip",
    Default = false,
    Tooltip = "Allow passing through walls and objects"
}):OnChanged(function(value)
    if value then
        local NoclipIgnoreTable = {
            "Collision","CollisionClone1","CollisionClone2",
            "CollisionClone3","CollisionClone4","CollisionClone5"
        }
        local function isIgnored(part)
            return table.find(NoclipIgnoreTable, part.Name)
        end

        NoclipConnection = RunService.Heartbeat:Connect(function()
            local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    if not isIgnored(part) and part.Name ~= "CollisionCrouch" then
                        part.CanCollide = false
                    elseif part.Name == "CollisionCrouch" then
                        part.CanCollide = (part.CollisionGroup == "PlayerCrouching")
                    end
                end
            end
        end)
    else
        if NoclipConnection then
            NoclipConnection:Disconnect()
            NoclipConnection = nil
        end
    end
end)

PlayerGroup:AddToggle("NoSlowDown", {
    Text = "No Slow Down",
    Default = false,
    Tooltip = "Remove movement slowdown effects"
}):OnChanged(function(value)
    if value then
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                local old = part.CustomPhysicalProperties
                part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
            end
        end
        
        LocalPlayer.CharacterAdded:Connect(function(newChar)
            for _, part in ipairs(newChar:GetDescendants()) do
                if part:IsA("BasePart") then
                    local old = part.CustomPhysicalProperties
                    part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
                end
            end
        end)
    end
end)

WorldGroup:AddToggle("RemoveSnare", {
    Text = "Remove Snare",
    Default = false,
    Tooltip = "Remove Snare traps from the game"
})

WorldGroup:AddToggle("RemoveDupe", {
    Text = "Remove Dupe",
    Default = false,
    Tooltip = "Remove Dupe entity from the game"
})

WorldGroup:AddToggle("RemoveSeekArm", {
    Text = "Remove Seek Arm",
    Default = false,
    Tooltip = "Remove Seek arms from the game"
})

WorldGroup:AddToggle("RemoveSeekFire", {
    Text = "Remove Seek Fire",
    Default = false,
    Tooltip = "Remove Seek fire from the game"
})

local settings = {
    ["RemoveSnare"] = { "Snare", "room" },
    ["RemoveDupe"] = { "SideroomDupe", "room" },
    ["RemoveSeekArm"] = { "Seek_Arm", "room" },
    ["RemoveSeekFire"] = { "ChandelierObstruction", "room" }
}

local listeners = {}

local function getCurrentRoom()
    local roomName = tostring(LatestRoomVal.Value)
    local roomsFolder = Workspace:FindFirstChild("CurrentRooms")
    return roomsFolder and roomsFolder:FindFirstChild(roomName)
end

local function disableTransmitters(inst)
    pcall(function() inst:Destroy() end)
end

local function setupRemoval(root, targetName)
    if not root or not root:IsDescendantOf(Workspace) then return nil end
    for _, inst in ipairs(root:GetDescendants()) do
        if inst.Name == targetName then disableTransmitters(inst) end
    end
    return root.DescendantAdded:Connect(function(inst)
        if inst.Name == targetName then disableTransmitters(inst) end
    end)
end

for toggleName, spec in pairs(settings) do
    Toggles[toggleName]:OnChanged(function(value)
        if value then
            local targetName, scope = spec[1], spec[2]
            local root = (scope == "global") and Workspace or getCurrentRoom()
            if root then
                local conn = setupRemoval(root, targetName)
                if conn then listeners[toggleName] = { conn = conn, root = root } end
            end
        else
            if listeners[toggleName] and listeners[toggleName].conn then
                listeners[toggleName].conn:Disconnect()
                listeners[toggleName] = nil
            end
        end
    end)
end

LatestRoomVal:GetPropertyChangedSignal("Value"):Connect(function()
    for toggleName, data in pairs(listeners) do
        if data.conn then data.conn:Disconnect() end
        if Toggles[toggleName].Value then
            local targetName, scope = settings[toggleName][1], settings[toggleName][2]
            local root = (scope == "global") and Workspace or getCurrentRoom()
            if root then
                local conn = setupRemoval(root, targetName)
                if conn then listeners[toggleName] = { conn = conn, root = root } end
            end
        end
    end
end)

SpeedBypassGroup:AddToggle("SpeedBypass", {
    Text = "Speed Bypass",
    Default = false,
    Tooltip = "Bypass speed limitations"
})

local Script = {
    CollisionClone = nil,
    SpeedBypassing = false,
    Functions = {}
}

function Script.Functions.InitCollisionClone()
    if Script.CollisionClone then
        Script.CollisionClone:Destroy()
    end
    
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("Collision") then
        return false
    end
    
    Script.CollisionClone = character.Collision:Clone()
    Script.CollisionClone.Name = "_CollisionClone"
    Script.CollisionClone.Massless = true
    Script.CollisionClone.Parent = character
    Script.CollisionClone.CanCollide = false
    Script.CollisionClone.CanQuery = false
    Script.CollisionClone.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
    
    return true
end

function Script.Functions.SpeedBypass()
    if Script.SpeedBypassing or not Script.CollisionClone then 
        return 
    end
    
    Script.SpeedBypassing = true

    task.spawn(function()
        while Toggles.SpeedBypass.Value and Script.CollisionClone and not Library.Unloaded do
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                task.wait(0.5)
                continue
            end
            
            local rootPart = player.Character.HumanoidRootPart
            if rootPart.Anchored then
                Script.CollisionClone.Massless = true
                repeat 
                    task.wait(0.1) 
                until not rootPart.Anchored or not Toggles.SpeedBypass.Value
                task.wait(0.15)
            else
                Script.CollisionClone.Massless = not Script.CollisionClone.Massless
                
                local delay = 0.1
                if Script.CollisionClone.Massless == false then
                    delay = 0.23
                end
                
                task.wait(delay)
            end
        end

        Script.SpeedBypassing = false
        if Script.CollisionClone then
            Script.CollisionClone.Massless = true
        end
    end)
end

Toggles.SpeedBypass:OnChanged(function(value)
    if value then
        if not Script.Functions.InitCollisionClone() then
            Toggles.SpeedBypass:SetValue(false)
            return
        end
        
        speedSlider:SetMax(35)
        Script.Functions.SpeedBypass()
    else
        speedSlider:SetMax(22)
        
        if Script.CollisionClone then
            Script.CollisionClone.Massless = true
        end
    end
end)

player.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    character:WaitForChild("Collision")
    
    if Toggles.SpeedBypass.Value then
        Script.Functions.InitCollisionClone()
        Script.Functions.SpeedBypass()
    end
end)

player.CharacterRemoving:Connect(function()
    if Script.CollisionClone then
        Script.CollisionClone:Destroy()
        Script.CollisionClone = nil
    end
    Script.SpeedBypassing = false
end)

if Toggles.SpeedBypass.Value then
    task.spawn(function())
        task.wait(1)
        if player.Character then
            Script.Functions.InitCollisionClone()
            Script.Functions.SpeedBypass()
        end
    end)
end

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})

MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})

MenuGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI Scale",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI)
    end,
})

MenuGroup:AddDivider()

MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { 
    Default = "RightShift", 
    NoUI = true, 
    Text = "Menu keybind" 
})

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("mspaint")
SaveManager:SetFolder("mspaint")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()