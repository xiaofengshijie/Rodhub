local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "mspaint",
    Footer = "version: example",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("主要功能", "house"),
    ESP = Window:AddTab("透视", "eye"),
    Hacks = Window:AddTab("外挂", "shield"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local MainLeftGroup = Tabs.Main:AddLeftGroupbox("自动功能")
local MainRightGroup = Tabs.Main:AddRightGroupbox("玩家功能")
local HackGroup = Tabs.Hacks:AddLeftGroupbox("外挂功能")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local ProximityPromptService = game:GetService("ProximityPromptService")

local player = Players.LocalPlayer
local RANGE = 12.5
local INTERVAL = 0.1

local fireOk = pcall(function()
    fireproximityprompt(Instance.new("ProximityPrompt"))
end)

local autoInteractEnabled = false
local autoInteractConnection = nil

local function firePrompt(prompt)
    if not (prompt and prompt.Enabled) then return end
    if fireOk and fireproximityprompt then
        fireproximityprompt(prompt)
    else
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration or 0)
        prompt:InputHoldEnd()
    end
end

local ignoredNames = {
    HidePrompt = true, ClimbPrompt = true, PushPrompt = true,
    InteractPrompt = true, PropPrompt = true,
    StarRiftPrompt = true, RiftPrompt = true
}
local ignoredParents = {
    Padlock = true, Seek_Arm = true, KeyObtainFake = true
}

local lastCheck = 0

local function onHeartbeat(dt)
    if not autoInteractEnabled then return end
    lastCheck = lastCheck + dt
    if lastCheck < INTERVAL then return end
    lastCheck = 0
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local pos = hrp.Position
    for _, prompt in ipairs(Workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled
           and not ignoredNames[prompt.Name]
           and not ignoredParents[prompt.Parent and prompt.Parent.Name or ""] then
            local part = prompt.Parent
            if part:IsA("Model") then 
                part = part:FindFirstChildWhichIsA("BasePart") 
                if not part then continue end
            end
            if part:IsA("BasePart") and (part.Position - pos).Magnitude <= RANGE then
                firePrompt(prompt)
            end
        end
    end
end

local function toggleAutoInteract(state)
    autoInteractEnabled = state
    if state then
        if autoInteractConnection then
            autoInteractConnection:Disconnect()
        end
        autoInteractConnection = RunService.Heartbeat:Connect(onHeartbeat)
    elseif autoInteractConnection then
        autoInteractConnection:Disconnect()
        autoInteractConnection = nil
    end
end

local Lighting = game:GetService("Lighting")
local brightnessEnabled = false
local originalProperties = {}
local brightnessConnection = nil

local function saveOriginalProperties()
    originalProperties.GlobalShadows = Lighting.GlobalShadows
    originalProperties.Brightness = Lighting.Brightness
    originalProperties.ClockTime = Lighting.ClockTime
    originalProperties.FogEnd = Lighting.FogEnd
    originalProperties.OutdoorAmbient = Lighting.OutdoorAmbient
    originalProperties.ExposureCompensation = Lighting.ExposureCompensation
end

local function applyBrightnessImmediately()
    Lighting.GlobalShadows = false
    Lighting.Brightness = 6
    Lighting.ClockTime = 14
    Lighting.FogEnd = 1e6
    Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
    Lighting.ExposureCompensation = 0.25
end

local function setBrightness(state)
    brightnessEnabled = state
    if state then
        saveOriginalProperties()
        applyBrightnessImmediately()
        if brightnessConnection then
            brightnessConnection:Disconnect()
        end
        brightnessConnection = RunService.RenderStepped:Connect(function()
            applyBrightnessImmediately()
        end)
    else
        if brightnessConnection then
            brightnessConnection:Disconnect()
            brightnessConnection = nil
        end
        if originalProperties.GlobalShadows ~= nil then
            Lighting.GlobalShadows = originalProperties.GlobalShadows
            Lighting.Brightness = originalProperties.Brightness
            Lighting.ClockTime = originalProperties.ClockTime
            Lighting.FogEnd = originalProperties.FogEnd
            Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
            Lighting.ExposureCompensation = originalProperties.ExposureCompensation
        end
    end
end

MainLeftGroup:AddToggle("AutoInteract", {
    Text = "自动互动",
    Default = false,
    Callback = toggleAutoInteract
}):AddKeyPicker("AutoInteractKey", {
    Default = "R",
    NoUI = false,
    Text = "自动互动快捷键",
    Callback = function(key)
        if key == "R" then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        end
    end
})

local speedEnabled = false
local targetSpeed = 18
local speedConnection = nil

local function applySpeed(character)
    if not character then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = targetSpeed
    end
end

local function onCharacterAdded(character)
    if speedEnabled then
        applySpeed(character)
    end
end

local function toggleSpeed(state)
    speedEnabled = state
    if state then
        if speedConnection then
            speedConnection:Disconnect()
        end
        if player.Character then
            applySpeed(player.Character)
        end
        speedConnection = player.CharacterAdded:Connect(onCharacterAdded)
        speedConnection = RunService.Heartbeat:Connect(function()
            if player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.WalkSpeed ~= targetSpeed then
                    humanoid.WalkSpeed = targetSpeed
                end
            end
        end)
    elseif speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end
end

local speedSlider = MainLeftGroup:AddSlider('SpeedValue', {
    Text = '速度值',
    Default = 18,
    Min = 16,
    Max = 85,
    Rounding = 0,
    Compact = false,
})

speedSlider:OnChanged(function()
    targetSpeed = speedSlider.Value
    if speedEnabled and player.Character then
        applySpeed(player.Character)
    end
end)

local speedToggle = MainLeftGroup:AddToggle('SpeedBoost', {
    Text = '速度提升',
    Default = false,
    Tooltip = '提升移动速度'
})

speedToggle:OnChanged(function()
    toggleSpeed(speedToggle.Value)
end)

local jumpConnections = {}
local function setupJump()
    for _, conn in ipairs(jumpConnections) do
        conn:Disconnect()
    end
    jumpConnections = {}
    local char = player.Character
    if not char then return end
    char:SetAttribute("CanJump", true)
    local function fix() char:SetAttribute("CanJump", true) end
    table.insert(jumpConnections, char:GetAttributeChangedSignal("CanJump"):Connect(fix))
    table.insert(jumpConnections, player.CharacterAdded:Connect(function(newChar)
        newChar:WaitForChild("Collision", 9e9)
        newChar:SetAttribute("CanJump", true)
        table.insert(jumpConnections, newChar:GetAttributeChangedSignal("CanJump"):Connect(function()
            newChar:SetAttribute("CanJump", true)
        end))
    end))
end

local jumpToggle = MainRightGroup:AddToggle('JumpButton', {
    Text = '强制跳跃',
    Default = false,
    Tooltip = '强制启用跳跃属性'
})

jumpToggle:OnChanged(function()
    if jumpToggle.Value then
        setupJump()
    else
        for _, conn in ipairs(jumpConnections) do
            conn:Disconnect()
        end
        jumpConnections = {}
        if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
            player.Character:SetAttribute("CanJump", false)
        end
    end
end)

MainRightGroup:AddToggle("Brightness", {
    Text = "高亮",
    Default = false,
    Callback = setBrightness
})

local autoHideEnabled = false
local thirdEnabled = false
local Rooms = {}

local function getRooms()
    Rooms = {}
    for _,v in ipairs(workspace.CurrentRooms:GetChildren()) do
        local num = tonumber(v.Name)
        if num then
            Rooms[num] = v
        end
    end
end

workspace.CurrentRooms.ChildAdded:Connect(getRooms)
getRooms()

local autoHideLoop = nil
local function startAutoHide()
    if autoHideLoop then return end
    autoHideLoop = task.spawn(function()
        repeat
            if Toggles.GA_AutoHide.Value then
                local Closest, Prompt
                local room = Rooms[player:GetAttribute("CurrentRoom")]
                if room then
                    local assets = room:FindFirstChild("Assets")
                    if assets then
                        for _, v in ipairs(assets:GetChildren()) do
                            if v:IsA("Model") then
                                if (v.Name == "Locker_Large" or v.Name == "Wardrobe" or v.Name == "Toolshed" or v.Name == "Bed" or v.Name == "Rooms_Locker" or v.Name == "Rooms_Locker_Fridge" or v.Name == "Backdoor_Wardrobe") and v:FindFirstChild("HidePrompt") and v:FindFirstChild("HiddenPlayer") then
                                    if not v.HiddenPlayer.Value and not v:FindFirstChild("HideEntityOnSpot", true) then
                                        if Closest then
                                            if (player.Character.Collision.Position - v.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                                Closest = v
                                                Prompt = v.HidePrompt
                                            end
                                        else
                                            Closest = v
                                            Prompt = v.HidePrompt
                                        end
                                    end
                                elseif v.Name == "Double_Bed" then
                                    for _, x in v:GetChildren() do
                                        if x.Name == "DoubleBed" and x:FindFirstChild("HidePrompt") and x:FindFirstChild("HiddenPlayer") then
                                            if not x.HiddenPlayer.Value and not x:FindFirstChild("HideEntityOnSpot", true) then
                                                if Closest then
                                                    if (player.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                                        Closest = x
                                                        Prompt = x.HidePrompt
                                                    end
                                                else
                                                    Closest = x
                                                    Prompt = x.HidePrompt
                                                end
                                            end
                                        end
                                    end
                                elseif v.Name == "Dumpster" then
                                    for _, x in v:GetChildren() do
                                        if x:FindFirstChild("HidePrompt") and x:FindFirstChild("HiddenPlayer") then
                                            if not x.HiddenPlayer.Value and not v.DumpsterBase:FindFirstChild("HideEntityOnSpot") then
                                                if Closest then
                                                    if (player.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                                        Closest = x
                                                        Prompt = x.HidePrompt
                                                    end
                                                else
                                                    Closest = x
                                                    Prompt = x.HidePrompt
                                                end
                                            end
                                        end
                                    end
                                end
                            elseif v:IsA("Folder") then
                                if v.Name == "Blockage" then
                                    for _, x in v:GetChildren() do
                                        if x:IsA("Model") and x.Name == "Wardrobe" then
                                            if not x.HiddenPlayer.Value then
                                                if Closest then
                                                    if (player.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                                        Closest = x
                                                        Prompt = x.HidePrompt
                                                    end
                                                else
                                                    Closest = x
                                                    Prompt = x.HidePrompt
                                                end
                                            end
                                        end
                                    end
                                elseif v.Name == "Vents" then
                                    for _, x in v:GetChildren() do
                                        if x.Name == "CircularVent" and x:FindFirstChild("Grate") and x.Grate:FindFirstChild("HidePrompt") and x:FindFirstChild("HiddenPlayer") then
                                            if not x.HiddenPlayer.Value and not v:FindFirstChild("HideEntityOnSpot", true) then
                                                if Closest then
                                                    if (player.Character.Collision.Position - x.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                                        Closest = x
                                                        Prompt = x.Grate.HidePrompt
                                                    end
                                                else
                                                    Closest = x
                                                    Prompt = x.Grate.HidePrompt
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                    for _, v in ipairs(room:GetChildren()) do
                        if v:IsA("Model") and v.Name == "CircularVent" and v.Grate:FindFirstChild("HidePrompt") and v:FindFirstChild("HiddenPlayer") then
                            if not v.HiddenPlayer.Value and not v:FindFirstChild("HideEntityOnSpot", true) then
                                if Closest then
                                    if (player.Character.Collision.Position - v.PrimaryPart.Position).Magnitude < (Closest.PrimaryPart.Position - player.Character.HumanoidRootPart.Position).Magnitude then
                                        Closest = v
                                        Prompt = v.Grate.HidePrompt
                                    end
                                else
                                    Closest = v
                                    Prompt = v.Grate.HidePrompt
                                end
                            end
                        end
                    end
                end
                if Closest and Prompt then
                    fireproximityprompt(Prompt)
                end
            end
            task.wait(0.3)
        until not Toggles.GA_AutoHide.Value
        autoHideLoop = nil
    end)
end

local thirdParts = Instance.new("Folder")
thirdParts.Name = "ThirdpersonParts"
thirdParts.Parent = workspace

local thirdThread = nil
local function startThirdperson()
    if thirdThread then return end
    thirdThread = task.spawn(function()
        repeat
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and Toggles.VV_Thirdperson.Value and Options.VV_Thirdperson_K:GetState() then
                for _, v in player.Character:GetChildren() do
                    if v:IsA("Accessory") then
                        local clone = v:FindFirstChildWhichIsA("MeshPart"):Clone()
                        clone.Parent = thirdParts
                    end
                end
                local clone = player.Character.Head:Clone()
                clone.Parent = thirdParts
                clone.Material = "SmoothPlastic"
                local thirdStep
                thirdStep = game:GetService("RunService").RenderStepped:Connect(function()
                    if _G.Main_Game then
                        if Toggles.VV_ThirdpersonCamCollision.Value then
                            local params = RaycastParams.new()
                            params.FilterDescendantsInstances = {player.Character, thirdParts}
                            params.FilterType = Enum.RaycastFilterType.Exclude
                            local direction = (_G.Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5))).Position - _G.Main_Game.basecamcf.Position
                            local sphere = workspace:Spherecast(_G.Main_Game.basecamcf.Position, 0.2, direction, params)
                            if sphere and sphere.Instance.CanCollide and sphere.Instance.Transparency < 0.99 then
                                local pos = _G.Main_Game.basecamcf.Position + direction.Unit * sphere.Distance
                                workspace.CurrentCamera.CFrame = CFrame.new(pos, pos + _G.Main_Game.basecamcf.LookVector) * (Toggles.VV_NoCamShake.Value and CFrame.new() or _G.Main_Game.csgo)
                            else
                                workspace.CurrentCamera.CFrame = _G.Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5)) * (Toggles.VV_NoCamShake.Value and CFrame.new() or _G.Main_Game.csgo)
                            end
                        else
                            workspace.CurrentCamera.CFrame = _G.Main_Game.basecamcf * CFrame.new(Options.VV_ThirdpersonOffset.Value, Options.VV_ThirdpersonOffsetUp.Value, 3.5 * (Options.VV_ThirdpersonDistance.Value / 7.5)) * (Toggles.VV_NoCamShake.Value and CFrame.new() or _G.Main_Game.csgo)
                        end
                    end
                end)
                repeat task.wait() until not Toggles.VV_Thirdperson.Value or not Options.VV_Thirdperson_K:GetState() or Library.Unloaded
                thirdStep:Disconnect()
                thirdParts:ClearAllChildren()
            end
            task.wait(0.3)
        until not Toggles.VV_Thirdperson.Value
        thirdThread = nil
    end)
end

MainLeftGroup:AddToggle('GA_AutoHide', { Text = '自动躲藏', Default = false, Callback = function(v) if v then startAutoHide() end end }):AddKeyPicker('GA_AutoHideKey', { Default = 'H', NoUI = false, Text = '自动躲藏快捷键', Callback = function(k) if k == "H" then Toggles.GA_AutoHide:SetValue(not Toggles.GA_AutoHide.Value) end end })
MainLeftGroup:AddToggle('VV_Thirdperson', { Text = '第三人称', Default = false, Callback = function(v) if v then startThirdperson() end end }):AddKeyPicker('VV_Thirdperson_K', { Default = 'V', NoUI = false, Text = '第三人称快捷键' })
MainLeftGroup:AddToggle('VV_ThirdpersonCamCollision', { Text = '第三人称碰撞', Default = true })
MainLeftGroup:AddToggle('VV_NoCamShake', { Text = '无镜头晃动', Default = false })
MainLeftGroup:AddSlider('VV_ThirdpersonDistance', { Text = '距离', Default = 7.5, Min = 1, Max = 20, Rounding = 1 })
MainLeftGroup:AddSlider('VV_ThirdpersonOffset', { Text = '水平偏移', Default = 0, Min = -10, Max = 10, Rounding = 1 })
MainLeftGroup:AddSlider('VV_ThirdpersonOffsetUp', { Text = '垂直偏移', Default = 0, Min = -10, Max = 10, Rounding = 1 })

local screechCon
local function antiScreech(state)
    if state then
        for _, v in ipairs(workspace.CurrentCamera:GetChildren()) do
            if v.Name == "GlitchedScreech" then v:Destroy() end
        end
        if not screechCon then
            screechCon = workspace.CurrentCamera.ChildAdded:Connect(function(child)
                if child.Name == "GlitchedScreech" then child:Destroy() end
            end)
        end
        local mods = player.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("Screech") or mods:FindFirstChild("_Screech")
        if mod then mod.Name = "_Screech" end
    else
        if screechCon then screechCon:Disconnect(); screechCon = nil end
    end
end

local function antiDread(state)
    if state then
        local mods = player.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("Dread") or mods:FindFirstChild("_Dread")
        if mod then mod.Name = "_Dread" end
    end
end

local hearingCon
local function antiFigure(state)
    if state then
        if not hearingCon then
            hearingCon = RunService.Heartbeat:Connect(function()
                local remotesFolder = ReplicatedStorage:FindFirstChild("RemotesFolder")
                local crouch = remotesFolder and remotesFolder:FindFirstChild("Crouch")
                if crouch then crouch:FireServer(true) end
            end)
        end
    else
        if hearingCon then hearingCon:Disconnect(); hearingCon = nil end
    end
end

local function removeA90(state)
    if state then
        local mods = player.PlayerGui:WaitForChild("MainUI"):WaitForChild("Initiator"):WaitForChild("Main_Game"):WaitForChild("RemoteListener"):WaitForChild("Modules")
        local mod = mods:FindFirstChild("A90") or mods:FindFirstChild("_A90")
        if mod then mod.Name = "_A90" end
    end
end

local eyesCon
local function antiEyes(state)
    if state then
        if not eyesCon then
            eyesCon = RunService.Heartbeat:Connect(function()
                if workspace:FindFirstChild("Eyes") then
                    local remotes = ReplicatedStorage:FindFirstChild("EntityInfo") or ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
                    local motor = remotes:FindFirstChild("MotorReplication")
                    if motor then motor:FireServer(-760) end
                end
            end)
        end
    else
        if eyesCon then eyesCon:Disconnect(); eyesCon = nil end
    end
end

local lookmanCon
local function antiLookman(state)
    if state then
        if not lookmanCon then
            lookmanCon = RunService.Heartbeat:Connect(function()
                if workspace:FindFirstChild("BackdoorLookman") then
                    local remotes = ReplicatedStorage:FindFirstChild("EntityInfo") or ReplicatedStorage:FindFirstChild("RemotesFolder") or ReplicatedStorage
                    local motor = remotes:FindFirstChild("MotorReplication")
                    if motor then motor:FireServer(-760) end
                end
            end)
        end
    else
        if lookmanCon then lookmanCon:Disconnect(); lookmanCon = nil end
    end
end

local noclipCon
local function toggleNoclip(state)
    if state then
        if not noclipCon then
            local ignore = { "Collision","CollisionClone1","CollisionClone2","CollisionClone3","CollisionClone4","CollisionClone5" }
            noclipCon = RunService.Heartbeat:Connect(function()
                local char = player.Character or player.CharacterAdded:Wait()
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        if not table.find(ignore, part.Name) and part.Name ~= "CollisionCrouch" then
                            part.CanCollide = false
                        elseif part.Name == "CollisionCrouch" then
                            part.CanCollide = (part.CollisionGroup == "PlayerCrouching")
                        end
                    end
                end
            end)
        end
    else
        if noclipCon then noclipCon:Disconnect(); noclipCon = nil end
    end
end

local removalListeners = {}
local removalSettings = {
    ["移除-Snare"]    = { "Snare",            "room" },
    ["移除-Dupe"]     = { "SideroomDupe",     "room" },
    ["移除-SeekArm"]  = { "Seek_Arm",         "room" },
    ["移除-SeekFire"] = { "ChandelierObstruction", "room" }
}

local function getCurrentRoom()
    local roomName = tostring(ReplicatedStorage:WaitForChild("GameData"):WaitForChild("LatestRoom").Value)
    local roomsFolder = workspace:WaitForChild("CurrentRooms")
    return roomsFolder:FindFirstChild(roomName)
end

local function setupRemoval(root, targetName)
    if not root or not root:IsDescendantOf(workspace) then return nil end
    for _, inst in ipairs(root:GetDescendants()) do
        if inst.Name == targetName then pcall(function() inst:Destroy() end) end
    end
    return root.DescendantAdded:Connect(function(inst)
        if inst.Name == targetName then pcall(function() inst:Destroy() end) end
    end)
end

local function updateRemovals()
    for _, data in pairs(removalListeners) do
        if data.conn then data.conn:Disconnect() end
    end
    removalListeners = {}
    for settingName, spec in pairs(removalSettings) do
        local targetName, scope = spec[1], spec[2]
        if Toggles[settingName] and Toggles[settingName].Value then
            local root = (scope == "global") and workspace or getCurrentRoom()
            if root then
                local conn = setupRemoval(root, targetName)
                if conn then removalListeners[targetName] = { conn = conn, root = root } end
            end
        end
    end
end

local noSlowdownCon
local function toggleNoSlowdown(state)
    if state then
        if noSlowdownCon then noSlowdownCon:Disconnect() end
        local function apply()
            local char = player.Character or player.CharacterAdded:Wait()
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    local old = part.CustomPhysicalProperties or PhysicalProperties.new(0.3, 0.3, 0.5)
                    part.CustomPhysicalProperties = PhysicalProperties.new(100, old.Friction, old.Elasticity)
                end
            end
        end
        apply()
        noSlowdownCon = player.CharacterAdded:Connect(apply)
    else
        if noSlowdownCon then noSlowdownCon:Disconnect(); noSlowdownCon = nil end
    end
end

HackGroup:AddToggle("AntiScreech", { Text = "删除尖叫声", Default = false, Callback = antiScreech })
HackGroup:AddToggle("AntiDread", { Text = "删除恐惧", Default = false, Callback = antiDread })
HackGroup:AddToggle("AntiFigure", { Text = "反 Figure 听力", Default = false, Callback = antiFigure })
HackGroup:AddToggle("RemoveA90", { Text = "移除 A90", Default = false, Callback = removeA90 })
HackGroup:AddToggle("AntiEyes", { Text = "反 Eyes", Default = false, Callback = antiEyes })
HackGroup:AddToggle("AntiLookman", { Text = "反 Lookman", Default = false, Callback = antiLookman })
HackGroup:AddToggle("NoClip", { Text = "穿墙", Default = false, Callback = toggleNoclip })
HackGroup:AddToggle("RemoveSnare", { Text = "移除 Snare", Default = false, Callback = function() updateRemovals() end })
HackGroup:AddToggle("RemoveDupe", { Text = "移除 Dupe", Default = false, Callback = function() updateRemovals() end })
HackGroup:AddToggle("RemoveSeekArm", { Text = "移除 SeekArm", Default = false, Callback = function() updateRemovals() end })
HackGroup:AddToggle("RemoveSeekFire", { Text = "移除 SeekFire", Default = false, Callback = function() updateRemovals() end })
HackGroup:AddToggle("NoSlowdown", { Text = "无减速", Default = false, Callback = toggleNoSlowdown })

ReplicatedStorage:WaitForChild("GameData"):WaitForChild("LatestRoom"):GetPropertyChangedSignal("Value"):Connect(updateRemovals)

local HotelGroup = Tabs.ESP:AddLeftGroupbox("酒店")
local MineGroup = Tabs.ESP:AddRightGroupbox("矿井")
local BackdoorGroup = Tabs.ESP:AddLeftGroupbox("后门")
local OutdoorGroup = Tabs.ESP:AddRightGroupbox("户外")

HotelGroup:AddDivider()
MineGroup:AddDivider()
BackdoorGroup:AddDivider()
OutdoorGroup:AddDivider()

local WorkspaceCamera = workspace.CurrentCamera
local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")

local COL = {
    Entity = Color3.fromRGB(255, 50, 50),
    Door = Color3.fromRGB(0, 200, 255),
    Key = Color3.fromRGB(0, 255, 0),
    Hide = Color3.fromRGB(255, 255, 0),
    Book = Color3.fromRGB(255, 100, 255),
    Lever = Color3.fromRGB(255, 165, 0),
    Breaker = Color3.fromRGB(255, 0, 200),
    Timer = Color3.fromRGB(0, 255, 255),
    Gen = Color3.fromRGB(255, 200, 0),
    Fuse = Color3.fromRGB(255, 255, 0),
    Chest = Color3.fromRGB(255, 215, 0),
    Gold = Color3.fromRGB(255, 215, 0),
    Player = Color3.fromRGB(0, 255, 255),
    Item = Color3.fromRGB(200, 200, 200),
    Anchor = Color3.fromRGB(255, 215, 0),
    EKey = Color3.fromRGB(0, 255, 0),
    Pump = Color3.fromRGB(255, 200, 0),
    ElectricalKey = Color3.fromRGB(0, 200, 200)
}

local ITEM_SET = {
    "Flashlight","Lockpick","Vitamins","Bandage","StarVial","StarBottle","StarJug",
    "Shakelight","Straplight","Bulklight","Battery","Candle","Crucifix","CrucifixWall",
    "Glowsticks","SkeletonKey","Candy","ShieldMini","ShieldBig","BandagePack","BatteryPack",
    "RiftCandle","LaserPointer","HolyGrenade","Shears","Smoothie","Cheese","Bread",
    "AlarmClock","RiftSmoothie","GweenSoda","GlitchCub","ElectricalKeyObtain"
}
local ITEM_MAP = {}
for _,v in ipairs(ITEM_SET) do ITEM_MAP[v]=true end

local ENTITY_NAME_MAP = {
    RushMoving = "Rush",
    AmbushMoving = "Ambush",
    A60 = "A-60",
    A120 = "A-120",
    BackdoorRush = "Backdoor Rush",
    SallyWindow = "Sally",
    JeffTheKiller = "Jeff",
    GrumbleRig = "Grumble",
    GiggleCeiling = "Giggle",
    Snare = "Snare",
    FigureRig = "Figure",
    FigureRagdoll = "Figure Ragdoll",
    BananaPeel = "Banana Peel",
    SeekMovingNewClone = "Seek",
    SeekMoving = "Seek",
    GlitchRush = "Glitch Rush",
    Eyes = "Eyes",
    GlitchAmbush = "Glitch Ambush",
    BackdoorLookman = "Lookman",
    Screech = "Screech",
    GlitchedScreech = "Glitched Screech"
}

if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

local function currentRoom()
    return CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
end

local function createTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function isInPlayerHand(obj)
    if not obj then return false end
    if obj:IsA("Tool") then
        local parent = obj.Parent
        if parent and (parent:IsA("Model") or parent:IsA("Backpack")) then
            if parent:IsA("Model") and Players:GetPlayerFromCharacter(parent) then
                return true
            elseif parent:IsA("Backpack") then
                return true
            end
        end
    end
    local current = obj
    while current and current ~= workspace do
        if current:IsA("Model") and Players:GetPlayerFromCharacter(current) then
            return true
        end
        current = current.Parent
    end
    return false
end

local tracerESPs = {}

local function addESP(obj, text, color, tracerColor)
    if not obj or not obj.Parent then return end
    if isInPlayerHand(obj) then return end
    if obj:FindFirstChild("PureESP") then obj.PureESP:Destroy() end
    local tracer = createTracer()
    tracer.Color = tracerColor or color
    tracerESPs[obj] = {
        object = obj,
        tracer = tracer,
        text = text,
        color = color
    }
    local hl = Instance.new("Highlight")
    hl.Name = "PureESP"
    hl.Adornee = obj
    hl.FillColor = color
    hl.OutlineColor = color
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = obj
    local bg = Instance.new("BillboardGui")
    bg.Name = "PureESP"
    bg.Adornee = obj
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    if obj.Name == "Bed" or obj.Name == "Double_Bed" then
        bg.StudsOffset = Vector3.new(0, 2, 0)
    end
    bg.Parent = obj
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = color
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = text
    txt.Parent = bg
    return hl, bg, tracer
end

local function clearRoomESP(room)
    if not room then return end
    for _,v in ipairs(room:GetDescendants()) do
        if v:FindFirstChild("PureESP") then v.PureESP:Destroy() end
        if tracerESPs[v] and tracerESPs[v].tracer then
            tracerESPs[v].tracer:Remove()
            tracerESPs[v] = nil
        end
    end
end

local ENTITIES = {
    "RushMoving","AmbushMoving","A60","A120","BackdoorRush","SallyWindow","JeffTheKiller","GrumbleRig",
    "GiggleCeiling","Snare","FigureRig","FigureRagdoll","BananaPeel","SeekMovingNewClone","SeekMoving",
    "GlitchRush","Eyes","GlitchAmbush","BackdoorLookman","Screech","GlitchedScreech"
}

local HIDE_SPOTS = {
    "Wardrobe","Rooms_Locker","Backdoor_Wardrobe","Toolshed","Locker_Large",
    "Bed","CircularVent","Rooms_Locker_Fridge","RetroWardrobe","Dumpster","Double_Bed"
}

local EXTRA_ITEMS = {
    {"锚","MinesAnchor",COL.Anchor},
    {"电钥匙","ElectricalKeyObtain",COL.EKey},
    {"水泵","WaterPump",COL.Pump}
}

local function checkAndAddESP(obj)
    if isInPlayerHand(obj) then return end
    if table.find(ENTITIES, obj.Name) and Toggles.EntityESP.Value then
        local displayName = ENTITY_NAME_MAP[obj.Name] or "实体"
        addESP(obj, displayName, COL.Entity)
        return
    end
    if obj.Name == "KeyObtain" and Toggles.KeyESP.Value then
        addESP(obj, "钥匙", COL.Key)
        return
    end
    if obj.Name == "ElectricalKeyObtain" and Toggles.ElectricalKeyESP.Value then
        addESP(obj, "电气室钥匙", COL.ElectricalKey)
        return
    end
    if table.find(HIDE_SPOTS, obj.Name) and Toggles.ContainerESP.Value then
        if obj.Name == "Bed" or obj.Name == "Double_Bed" then
            addESP(obj, "床", COL.Hide)
        else
            addESP(obj, "柜子", COL.Hide)
        end
        return
    end
    if obj:IsA("Model") and obj.Name == "LiveHintBook" and Toggles.BookESP.Value then
        addESP(obj, "书", COL.Book)
        return
    end
    if obj:IsA("Model") and obj.Name == "LeverForGate" and Toggles.LeverESP.Value then
        addESP(obj, "杠杆", COL.Lever)
        return
    end
    if obj.Name == "LiveBreakerPolePickup" and Toggles.BreakerESP.Value then
        addESP(obj, "断路器", COL.Breaker)
        return
    end
    if obj.Name == "TimerLever" and Toggles.TimerESP.Value then
        addESP(obj, "定时器", COL.Timer)
        return
    end
    if obj.Name == "MinesGenerator" and Toggles.GeneratorESP.Value then
        addESP(obj, "发电机", COL.Gen)
        return
    end
    if obj.Name == "FuseObtain" and Toggles.FuseESP.Value then
        addESP(obj, "保险丝", COL.Fuse)
        return
    end
    if obj.Name == "ChestBox" and Toggles.ChestESP.Value then
        addESP(obj, "宝箱", COL.Chest)
        return
    end
    if obj.Name == "GoldPile" and Toggles.GoldESP.Value then
        addESP(obj, "金币 "..tostring(obj:GetAttribute("GoldValue") or "?"), COL.Gold)
        return
    end
    for _,row in ipairs(EXTRA_ITEMS) do
        if obj.Name == row[2] and Toggles.ExtraItemsESP.Value then
            addESP(obj, row[1], row[3])
            return
        end
    end
    if ITEM_MAP[obj.Name] and Toggles.ItemESP.Value then
        addESP(obj, obj.Name, COL.Item)
        return
    end
end

local currentRoomListener = nil

local function setupRoomListener(room)
    if currentRoomListener then
        currentRoomListener:Disconnect()
        currentRoomListener = nil
    end
    if not room then return end
    for _, obj in ipairs(room:GetDescendants()) do
        checkAndAddESP(obj)
    end
    currentRoomListener = room.DescendantAdded:Connect(function(obj)
        checkAndAddESP(obj)
    end)
end

local roomChangeListener = LatestRoomVal.Changed:Connect(function()
    local room = currentRoom()
    setupRoomListener(room)
end)

local function addPlayer(plr)
    if not Toggles.PlayerESP.Value then return end
    local function onChar(char)
        if char then
            addESP(char, plr.Name, COL.Player)
            local function onChildAdded(child)
                if child:IsA("Tool") and child:FindFirstChild("PureESP") then
                    child.PureESP:Destroy()
                end
            end
            char.ChildAdded:Connect(onChildAdded)
            for _, child in ipairs(char:GetChildren()) do
                if child:IsA("Tool") and child:FindFirstChild("PureESP") then
                    child.PureESP:Destroy()
                end
            end
        end
    end
    if plr.Character then onChar(plr.Character) end
    plr.CharacterAdded:Connect(onChar)
end

local lastTracerUpdate = 0
local TRACER_UPDATE_INTERVAL = 0.05

local function updateTracers()
    local now = tick()
    if now - lastTracerUpdate < TRACER_UPDATE_INTERVAL then return end
    lastTracerUpdate = now
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    local root = player.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    local playerPos = root.Position
    local camera = workspace.CurrentCamera
    for obj, data in pairs(tracerESPs) do
        if obj and obj.Parent then
            local objPos = obj:IsA("BasePart") and obj.Position or 
                          (obj:IsA("Model") and obj.PrimaryPart and obj.PrimaryPart.Position)
            if objPos then
                local screenPos, onScreen = camera:WorldToViewportPoint(objPos)
                if onScreen then
                    data.tracer.Visible = true
                    data.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                else
                    data.tracer.Visible = false
                end
            end
        else
            if data.tracer then data.tracer:Remove() end
            tracerESPs[obj] = nil
        end
    end
end

local function cleanup()
    if roomChangeListener then roomChangeListener:Disconnect() end
    if currentRoomListener then currentRoomListener:Disconnect() end
    for obj, data in pairs(tracerESPs) do
        if data.tracer then data.tracer:Remove() end
    end
    tracerESPs = {}
    clearRoomESP(workspace)
end

local function rescanObjects()
    clearRoomESP(currentRoom())
    setupRoomListener(currentRoom())
    for _,p in ipairs(Players:GetPlayers()) do
        if p ~= player then addPlayer(p) end
    end
    Players.PlayerAdded:Connect(function(p)
        if p ~= player then addPlayer(p) end
    end)
end

local DOOR_COLOR = Color3.fromRGB(0, 200, 255)
local doorESPs = {}
local MAX_DOORS = 1000
local lastDoorScan = 0
local DOOR_SCAN_INTERVAL = 1

local function createDoorTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = DOOR_COLOR
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function createDoorESP(door, roomId)
    if door:FindFirstChild("DoorESP") then return end
    local hl = Instance.new("Highlight")
    hl.Name = "DoorESP"
    hl.Adornee = door
    hl.FillColor = DOOR_COLOR
    hl.OutlineColor = DOOR_COLOR
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = door
    local bg = Instance.new("BillboardGui")
    bg.Name = "DoorESP"
    bg.Adornee = door
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    bg.Parent = door
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = DOOR_COLOR
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = string.format("门 %d", roomId + 1)
    txt.Parent = bg
    local tracer = createDoorTracer()
    doorESPs[roomId] = {
        door = door,
        billboard = bg,
        highlight = hl,
        tracer = tracer
    }
end

local function updateDoorTracers()
    if not Toggles.DoorESP.Value then return end
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    local root = player.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    local playerPos = root.Position
    local camera = workspace.CurrentCamera
    for roomId, data in pairs(doorESPs) do
        if data.door and data.door.Parent then
            local doorPos = data.door.Position
            local screenPos, onScreen = camera:WorldToViewportPoint(doorPos)
            if onScreen then
                data.tracer.Visible = true
                data.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
            else
                data.tracer.Visible = false
            end
        else
            if data.tracer then data.tracer:Remove() end
            doorESPs[roomId] = nil
        end
    end
end

local function scanForDoors()
    if not Toggles.DoorESP.Value then return end
    local now = tick()
    if now - lastDoorScan < DOOR_SCAN_INTERVAL then return end
    lastDoorScan = now
    for roomId = 0, MAX_DOORS do
        local room = workspace.CurrentRooms:FindFirstChild(tostring(roomId))
        if room then
            local doorFolder = room:FindFirstChild("Door")
            if doorFolder then
                local door = doorFolder:FindFirstChild("Door")
                if door and not doorESPs[roomId] then
                    createDoorESP(door, roomId)
                end
            end
        end
    end
end

local combinedHeartbeat = RunService.Heartbeat:Connect(function(dt)
    updateTracers()
    scanForDoors()
    updateDoorTracers()
end)

workspace.CurrentRooms.ChildAdded:Connect(function(child)
    if tonumber(child.Name) then
        task.wait(0.5)
        scanForDoors()
    end
end)

local function cleanupDoors()
    for roomId, data in pairs(doorESPs) do
        if data.tracer then data.tracer:Remove() end
        if data.door and data.door:FindFirstChild("DoorESP") then
            data.door.DoorESP:Destroy()
        end
    end
    doorESPs = {}
end

HotelGroup:AddToggle("EntityESP", { Text = "实体透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ContainerESP", { Text = "柜子透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ChestESP", { Text = "宝箱透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("GoldESP", { Text = "金币透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("BookESP", { Text = "书透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("BreakerESP", { Text = "断路器透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("LeverESP", { Text = "拉杆透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ItemESP", { Text = "物品透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("PlayerESP", { Text = "玩家透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("KeyESP", { Text = "钥匙透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ElectricalKeyESP", { Text = "电气室钥匙透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("DoorESP", { Text = "门透视", Default = false, Callback = function(on) if on then scanForDoors() else cleanupDoors() end end })
HotelGroup:AddToggle("ExtraItemsESP", { Text = "额外物品透视", Default = false, Callback = function() rescanObjects() end })

MineGroup:AddToggle("FuseESP", { Text = "保险丝透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("GeneratorESP", { Text = "发电机透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("AnchorESP", { Text = "锚透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("PumpESP", { Text = "水泵透视", Default = false, Callback = function() rescanObjects() end })

BackdoorGroup:AddToggle("TimerESP", { Text = "计时器透视", Default = false, Callback = function() rescanObjects() end })

OutdoorGroup:AddToggle("OutdoorESP", { Text = "户外透视", Default = false, Callback = function(on) end })

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", { Default = Library.KeybindFrame.Visible, Text = "Open Keybind Menu", Callback = function(value) Library.KeybindFrame.Visible = value end })
MenuGroup:AddToggle("ShowCustomCursor", { Text = "Custom Cursor", Default = true, Callback = function(Value) Library.ShowCustomCursor = Value end })
MenuGroup:AddDropdown("NotificationSide", { Values = { "Left", "Right" }, Default = "Right", Text = "Notification Side", Callback = function(Value) Library:SetNotifySide(Value) end })
MenuGroup:AddDropdown("DPIDropdown", { Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" }, Default = "100%", Text = "DPI Scale", Callback = function(Value) Value = Value:gsub("%%", "") local DPI = tonumber(Value) Library:SetDPIScale(DPI) end })
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

MenuGroup:AddButton("Unload", function() 
    Library:Unload() 
    cleanup() 
    cleanupDoors() 
    if autoInteractConnection then
        autoInteractConnection:Disconnect()
    end
    if combinedHeartbeat then
        combinedHeartbeat:Disconnect()
    end
    if brightnessConnection then
        brightnessConnection:Disconnect()
    end
    setBrightness(false)
    if jumpLoop then
        task.cancel(jumpLoop)
        jumpLoop = nil
    end
    if speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
    end
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
    if autoHideLoop then
        task.cancel(autoHideLoop)
        autoHideLoop = nil
    end
    if thirdThread then
        task.cancel(thirdThread)
        thirdThread = nil
    end
    thirdParts:ClearAllChildren()
    for _, conn in ipairs(jumpConnections) do
        conn:Disconnect()
    end
    if screechCon then screechCon:Disconnect() end
    if hearingCon then hearingCon:Disconnect() end
    if eyesCon then eyesCon:Disconnect() end
    if lookmanCon then lookmanCon:Disconnect() end
    if noclipCon then noclipCon:Disconnect() end
    if noSlowdownCon then noSlowdownCon:Disconnect() end
    for _, data in pairs(removalListeners) do
        if data.conn then data.conn:Disconnect() end
    end
end)

task.spawn(function()
    while not Workspace:FindFirstChild("CurrentRooms") do
        task.wait(0.5)
    end
    local CurrentRooms = Workspace:WaitForChild("CurrentRooms")
    local GameData = ReplicatedStorage:WaitForChild("GameData")
    local LatestRoomVal = GameData:WaitForChild("LatestRoom")
    local function setupRoomListener(room)
        if currentRoomListener then
            currentRoomListener:Disconnect()
            currentRoomListener = nil
        end
        if not room then return end
        for _, obj in ipairs(room:GetDescendants()) do
            checkAndAddESP(obj)
        end
        currentRoomListener = room.DescendantAdded:Connect(function(obj)
            checkAndAddESP(obj)
        end)
    end
    LatestRoomVal.Changed:Connect(function()
        local room = CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
        setupRoomListener(room)
    end)
    local room = CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
    if room then
        setupRoomListener(room)
    end
    for _,p in ipairs(Players:GetPlayers()) do
        if p ~= player then addPlayer(p) end
    end
    Players.PlayerAdded:Connect(function(p)
        if p ~= player then addPlayer(p) end
    end)
end)
