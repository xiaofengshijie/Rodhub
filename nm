local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "mspaint",
    Footer = "version: example",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("主要功能", "house"),
    ESP = Window:AddTab("透视", "eye"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

-- 主要功能组
local MainLeftGroup = Tabs.Main:AddLeftGroupbox("自动功能")
local MainRightGroup = Tabs.Main:AddRightGroupbox("玩家功能")

-- 自动互动功能
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ProximityPromptService = game:GetService("ProximityPromptService")

local player = Players.LocalPlayer
local RANGE = 12.5 -- 触发距离
local INTERVAL = 0.1 -- 增加间隔减少性能消耗

local fireOk = pcall(function()
    fireproximityprompt(Instance.new("ProximityPrompt"))
end)

local autoInteractEnabled = false
local autoInteractConnection = nil

local function firePrompt(prompt)
    if not (prompt and prompt.Enabled) then return end
    if fireOk and fireproximityprompt then
        fireproximityprompt(prompt)
    else
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration or 0)
        prompt:InputHoldEnd()
    end
end

local ignoredNames = {
    HidePrompt = true, ClimbPrompt = true, PushPrompt = true,
    InteractPrompt = true, PropPrompt = true,
    StarRiftPrompt = true, RiftPrompt = true
}
local ignoredParents = {
    Padlock = true, Seek_Arm = true, KeyObtainFake = true
}

local lastCheck = 0
local promptCache = {} -- 缓存提示对象
local lastCacheUpdate = 0
local CACHE_UPDATE_INTERVAL = 2 -- 缓存更新间隔(秒)

-- 优化距离计算 - 使用平方距离避免开方运算
local function isInRange(pos1, pos2, range)
    local dx = pos1.X - pos2.X
    local dy = pos1.Y - pos2.Y
    local dz = pos1.Z - pos2.Z
    return (dx*dx + dy*dy + dz*dz) <= (range * range)
end

local function updatePromptCache()
    local now = tick()
    if now - lastCacheUpdate < CACHE_UPDATE_INTERVAL then return end
    lastCacheUpdate = now
    
    table.clear(promptCache)
    
    -- 扫描整个工作区
    for _, prompt in ipairs(Workspace:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") and prompt.Enabled
           and not ignoredNames[prompt.Name]
           and not ignoredParents[prompt.Parent and prompt.Parent.Name or ""] then
            table.insert(promptCache, prompt)
        end
    end
end

local function onHeartbeat(dt)
    if not autoInteractEnabled then return end
    
    lastCheck = lastCheck + dt
    if lastCheck < INTERVAL then return end
    lastCheck = 0

    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local pos = hrp.Position

    -- 更新缓存
    updatePromptCache()
    
    -- 使用缓存而不是每次都遍历
    for _, prompt in ipairs(promptCache) do
        if prompt and prompt.Parent then
            local part = prompt.Parent
            if part:IsA("Model") then 
                part = part:FindFirstChildWhichIsA("BasePart") 
                if not part then goto continue end
            end
            
            if part:IsA("BasePart") and isInRange(part.Position, pos, RANGE) then
                firePrompt(prompt)
            end
        end
        ::continue::
    end
end

local function toggleAutoInteract(state)
    autoInteractEnabled = state
    if state then
        updatePromptCache() -- 启用时更新缓存
        if autoInteractConnection then
            autoInteractConnection:Disconnect()
        end
        autoInteractConnection = RunService.Heartbeat:Connect(onHeartbeat)
    elseif autoInteractConnection then
        autoInteractConnection:Disconnect()
        autoInteractConnection = nil
    end
end

-- 亮度调整功能
local Lighting = game:GetService("Lighting")
local brightnessEnabled = false
local originalProperties = {}

local function saveOriginalProperties()
    originalProperties.GlobalShadows = Lighting.GlobalShadows
    originalProperties.Brightness = Lighting.Brightness
    originalProperties.ClockTime = Lighting.ClockTime
    originalProperties.FogEnd = Lighting.FogEnd
    originalProperties.OutdoorAmbient = Lighting.OutdoorAmbient
    originalProperties.ExposureCompensation = Lighting.ExposureCompensation
end

local function setBrightness(state)
    brightnessEnabled = state
    if state then
        saveOriginalProperties()
        Lighting.GlobalShadows = false
        Lighting.Brightness = 6
        Lighting.ClockTime = 14
        Lighting.FogEnd = 1e6
        Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
        Lighting.ExposureCompensation = 0.25
        
        -- 设置防回滚
        if not Lighting:FindFirstChild("BrightnessOverride") then
            local connection
            connection = Lighting.Changed:Connect(function(prop)
                if prop == "GlobalShadows" or prop == "Brightness" or prop == "ClockTime" or 
                   prop == "FogEnd" or prop == "OutdoorAmbient" or prop == "ExposureCompensation" then
                    Lighting.GlobalShadows = false
                    Lighting.Brightness = 6
                    Lighting.ClockTime = 14
                    Lighting.FogEnd = 1e6
                    Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
                    Lighting.ExposureCompensation = 0.25
                end
            end)
            
            -- 存储连接以便稍后清理
            local binder = Instance.new("BoolValue")
            binder.Name = "BrightnessOverride"
            binder.Parent = Lighting
            binder:SetAttribute("Connection", tostring(connection))
        end
    else
        -- 恢复原始属性
        if originalProperties.GlobalShadows ~= nil then
            Lighting.GlobalShadows = originalProperties.GlobalShadows
            Lighting.Brightness = originalProperties.Brightness
            Lighting.ClockTime = originalProperties.ClockTime
            Lighting.FogEnd = originalProperties.FogEnd
            Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
            Lighting.ExposureCompensation = originalProperties.ExposureCompensation
        end
        
        -- 移除防回滚
        local override = Lighting:FindFirstChild("BrightnessOverride")
        if override then
            local connId = override:GetAttribute("Connection")
            if connId then
                for _, conn in ipairs(getconnections(Lighting.Changed)) do
                    if tostring(conn) == connId then
                        conn:Disconnect()
                        break
                    end
                end
            end
            override:Destroy()
        end
    end
end

-- 添加UI元素
MainLeftGroup:AddToggle("AutoInteract", {
    Text = "自动互动",
    Default = false,
    Callback = toggleAutoInteract
}):AddKeyPicker("AutoInteractKey", {
    Default = "R",
    NoUI = false,
    Text = "自动互动快捷键",
    Callback = function(key)
        if key == "R" then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        end
    end
})

-- 添加 Get Jump Button 功能到右侧
Toggles.JumpButton = MainRightGroup:AddToggle('JumpButton', {
    Text = '强制跳跃',
    Default = false,
    Tooltip = '强制启用跳跃属性'
})

Toggles.JumpButton:OnChanged(function()
    _G.JumpButton = Toggles.JumpButton.Value

    if _G.JumpButton then
        _G.JumpLoop = task.spawn(function()
            while _G.JumpButton and task.wait(0.1) do
                if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
                    player.Character:SetAttribute("CanJump", true)
                end
            end
        end)
    else
        if _G.JumpLoop then
            task.cancel(_G.JumpLoop)
            _G.JumpLoop = nil
        end
        
        if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
            player.Character:SetAttribute("CanJump", false)
        end
    end
end)

MainRightGroup:AddToggle("Brightness", {
    Text = "高亮模式",
    Default = false,
    Callback = setBrightness
})

-- ESP代码部分
local HotelGroup = Tabs.ESP:AddLeftGroupbox("酒店")
local MineGroup = Tabs.ESP:AddRightGroupbox("矿井")
local BackdoorGroup = Tabs.ESP:AddLeftGroupbox("后门")
local OutdoorGroup = Tabs.ESP:AddRightGroupbox("户外")

HotelGroup:AddDivider()
MineGroup:AddDivider()
BackdoorGroup:AddDivider()
OutdoorGroup:AddDivider()

local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")

local COL = {
    Entity = Color3.fromRGB(255, 50, 50),
    Door = Color3.fromRGB(0, 200, 255),
    Key = Color3.fromRGB(0, 255, 0),
    Hide = Color3.fromRGB(255, 255, 0),
    Book = Color3.fromRGB(255, 100, 255),
    Lever = Color3.fromRGB(255, 165, 0),
    Breaker = Color3.fromRGB(255, 0, 200),
    Timer = Color3.fromRGB(0, 255, 255),
    Gen = Color3.fromRGB(255, 200, 0),
    Fuse = Color3.fromRGB(255, 255, 0),
    Chest = Color3.fromRGB(255, 215, 0),
    Gold = Color3.fromRGB(255, 215, 0),
    Player = Color3.fromRGB(0, 255, 255),
    Item = Color3.fromRGB(200, 200, 200),
    Anchor = Color3.fromRGB(255, 215, 0),
    EKey = Color3.fromRGB(0, 255, 0),
    Pump = Color3.fromRGB(255, 200, 0),
    ElectricalKey = Color3.fromRGB(0, 200, 200)
}

local ITEM_SET = {
    "Flashlight","Lockpick","Vitamins","Bandage","StarVial","StarBottle","StarJug",
    "Shakelight","Straplight","Bulklight","Battery","Candle","Crucifix","CrucifixWall",
    "Glowsticks","SkeletonKey","Candy","ShieldMini","ShieldBig","BandagePack","BatteryPack",
    "RiftCandle","LaserPointer","HolyGrenade","Shears","Smoothie","Cheese","Bread",
    "AlarmClock","RiftSmoothie","GweenSoda","GlitchCub","ElectricalKeyObtain"
}
local ITEM_MAP = {}
for _,v in ipairs(ITEM_SET) do ITEM_MAP[v]=true end

local ENTITY_NAME_MAP = {
    RushMoving = "Rush",
    AmbushMoving = "Ambush",
    A60 = "A-60",
    A120 = "A-120",
    BackdoorRush = "Backdoor Rush",
    SallyWindow = "Sally",
    JeffTheKiller = "Jeff",
    GrumbleRig = "Grumble",
    GiggleCeiling = "Giggle",
    Snare = "Snare",
    FigureRig = "Figure",
    FigureRagdoll = "Frame Ragdoll",
    BananaPeel = "Banana Peel",
    SeekMovingNewClone = "Seek",
    SeekMoving = "Seek",
    GlitchRush = "Glitch Rush",
    Eyes = "Eyes",
    GlitchAmbush = "Glitch Ambush",
    BackdoorLookman = "Lookman",
    Screech = "Screech",
    GlitchedScreech = "Glitched Screech"
}

if not table.find then
    table.find = function(t, value)
        for i, v in ipairs(t) do
            if v == value then
                return i
            end
        end
        return nil
    end
end

local function currentRoom()
    return CurrentRooms:FindFirstChild(tostring(LatestRoomVal.Value))
end

local function createTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function isInPlayerHand(obj)
    if not obj then return false end
    if obj:IsA("Tool") then
        local parent = obj.Parent
        if parent and (parent:IsA("Model") or parent:IsA("Backpack")) then
            if parent:IsA("Model") and Players:GetPlayerFromCharacter(parent) then
                return true
            elseif parent:IsA("Backpack") then
                return true
            end
        end
    end
    local current = obj
    while current and current ~= workspace do
        if current:IsA("Model") and Players:GetPlayerFromCharacter(current) then
            return true
        end
        current = current.Parent
    end
    return false
end

local tracerESPs = {}

local function addESP(obj, text, color, tracerColor)
    if not obj or not obj.Parent then return end
    if isInPlayerHand(obj) then return end
    if obj:FindFirstChild("PureESP") then obj.PureESP:Destroy() end
    local tracer = createTracer()
    tracer.Color = tracerColor or color
    tracerESPs[obj] = {
        object = obj,
        tracer = tracer,
        text = text,
        color = color
    }
    local hl = Instance.new("Highlight")
    hl.Name = "PureESP"
    hl.Adornee = obj
    hl.FillColor = color
    hl.OutlineColor = color
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = obj
    local bg = Instance.new("BillboardGui")
    bg.Name = "PureESP"
    bg.Adornee = obj
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    if obj.Name == "Bed" or obj.Name == "Double_Bed" then
        bg.StudsOffset = Vector3.new(0, 2, 0)
    end
    bg.Parent = obj
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = color
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = text
    txt.Parent = bg
    return hl, bg, tracer
end

local function clearRoomESP(room)
    if not room then return end
    for _,v in ipairs(room:GetDescendants()) do
        if v:FindFirstChild("PureESP") then v.PureESP:Destroy() end
        if tracerESPs[v] and tracerESPs[v].tracer then
            tracerESPs[v].tracer:Remove()
            tracerESPs[v] = nil
        end
    end
end

local ENTITIES = {
    "RushMoving","AmbushMoving","A60","A120","BackdoorRush","SallyWindow","JeffTheKiller","GrumbleRig",
    "GiggleCeiling","Snare","FigureRig","FigureRagdoll","BananaPeel","SeekMovingNewClone","SeekMoving",
    "GlitchRush","Eyes","GlitchAmbush","BackdoorLookman","Screech","GlitchedScreech"
}

local HIDE_SPOTS = {
    "Wardrobe","Rooms_Locker","Backdoor_Wardrobe","Toolshed","Locker_Large",
    "Bed","CircularVent","Rooms_Locker_Fridge","RetroWardrobe","Dumpster","Double_Bed"
}

local EXTRA_ITEMS = {
    {"锚","MinesAnchor",COL.Anchor},
    {"电钥匙","ElectricalKeyObtain",COL.EKey},
    {"水泵","WaterPump",COL.Pump}
}

local function checkAndAddESP(obj)
    if isInPlayerHand(obj) then return end
    if table.find(ENTITIES, obj.Name) and Toggles.EntityESP.Value then
        local displayName = ENTITY_NAME_MAP[obj.Name] or "实体"
        addESP(obj, displayName, COL.Entity)
        return
    end
    if obj.Name == "KeyObtain" and Toggles.KeyESP.Value then
        addESP(obj, "钥匙", COL.Key)
        return
    end
    if obj.Name == "ElectricalKeyObtain" and Toggles.ElectricalKeyESP.Value then
        addESP(obj, "电气室钥匙", COL.ElectricalKey)
        return
    end
    if table.find(HIDE_SPOTS, obj.Name) and Toggles.ContainerESP.Value then
        if obj.Name == "Bed" or obj.Name == "Double_Bed" then
            addESP(obj, "床", COL.Hide)
        else
            addESP(obj, "柜子", COL.Hide)
        end
        return
    end
    if obj:IsA("Model") and obj.Name == "LiveHintBook" and Toggles.BookESP.Value then
        addESP(obj, "书", COL.Book)
        return
    end
    if obj:IsA("Model") and obj.Name == "LeverForGate" and Toggles.LeverESP.Value then
        addESP(obj, "杠杆", COL.Lever)
        return
    end
    if obj.Name == "LiveBreakerPolePickup" and Toggles.BreakerESP.Value then
        addESP(obj, "断路器", COL.Breaker)
        return
    end
    if obj.Name == "TimerLever" and Toggles.TimerESP.Value then
        addESP(obj, "定时器", COL.Timer)
        return
    end
    if obj.Name == "MinesGenerator" and Toggles.GeneratorESP.Value then
        addESP(obj, "发电机", COL.Gen)
        return
    end
    if obj.Name == "FuseObtain" and Toggles.FuseESP.Value then
        addESP(obj, "保险丝", COL.Fuse)
        return
    end
    if obj.Name == "ChestBox" and Toggles.ChestESP.Value then
        addESP(obj, "宝箱", COL.Chest)
        return
    end
    if obj.Name == "GoldPile" and Toggles.GoldESP.Value then
        addESP(obj, "金币 "..tostring(obj:GetAttribute("GoldValue") or "?"), COL.Gen)
        return
    end
    for _,row in ipairs(EXTRA_ITEMS) do
        if obj.Name == row[2] and Toggles.ExtraItemsESP.Value then
            addESP(obj, row[1], row[3])
            return
        end
    end
    if ITEM_MAP[obj.Name] and Toggles.ItemESP.Value then
        addESP(obj, obj.Name, COL.Item)
        return
    end
end

local currentRoomListener = nil

local function setupRoomListener(room)
    if currentRoomListener then
        currentRoomListener:Disconnect()
        currentRoomListener = nil
    end
    if not room then return end
    for _, obj in ipairs(room:GetDescendants()) do
        checkAndAddESP(obj)
    end
    currentRoomListener = room.DescendantAdded:Connect(function(obj)
        checkAndAddESP(obj)
    end)
end

local roomChangeListener = LatestRoomVal.Changed:Connect(function()
    local room = currentRoom()
    setupRoomListener(room)
end)

local function addPlayer(plr)
    if not Toggles.PlayerESP.Value then return end
    local function onChar(char)
        if char then
            addESP(char, plr.Name, COL.Player)
            local function onChildAdded(child)
                if child:IsA("Tool") and child:FindFirstChild("PureESP") then
                    child.PureESP:Destroy()
                end
            end
            char.ChildAdded:Connect(onChildAdded)
            for _, child in ipairs(char:GetChildren()) do
                if child:IsA("Tool") and child:FindFirstChild("PureESP") then
                    child.PureESP:Destroy()
                end
            end
        end
    end
    if plr.Character then onChar(plr.Character) end
    plr.CharacterAdded:Connect(onChar)
end

local lastTracerUpdate = 0
local TRACER_UPDATE_INTERVAL = 0.05 -- 降低追踪器更新频率

local function updateTracers()
    local now = tick()
    if now - lastTracerUpdate < TRACER_UPDATE_INTERVAL then return end
    lastTracerUpdate = now
    
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    local root = player.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    local playerPos = root.Position
    local camera = workspace.CurrentCamera
    
    for obj, data in pairs(tracerESPs) do
        if obj and obj.Parent then
            local objPos = obj:IsA("BasePart") and obj.Position or 
                          (obj:IsA("Model") and obj.PrimaryPart and obj.PrimaryPart.Position)
            if objPos then
                local screenPos, onScreen = camera:WorldToViewportPoint(objPos)
                if onScreen then
                    data.tracer.Visible = true
                    data.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                else
                    data.tracer.Visible = false
                end
            end
        else
            if data.tracer then data.tracer:Remove() end
            tracerESPs[obj] = nil
        end
    end
end

local function cleanup()
    if roomChangeListener then roomChangeListener:Disconnect() end
    if currentRoomListener then currentRoomListener:Disconnect() end
    for obj, data in pairs(tracerESPs) do
        if data.tracer then data.tracer:Remove() end
    end
    tracerESPs = {}
    clearRoomESP(workspace)
end

local function rescanObjects()
    clearRoomESP(currentRoom())
    setupRoomListener(currentRoom())
    for _,p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then addPlayer(p) end
    end
    Players.PlayerAdded:Connect(function(p)
        if p ~= LocalPlayer then addPlayer(p) end
    end)
end

local DOOR_COLOR = Color3.fromRGB(0, 200, 255)
local doorESPs = {}
local MAX_DOORS = 1000
local lastDoorScan = 0
local DOOR_SCAN_INTERVAL = 1 -- 降低门扫描频率

local function createDoorTracer()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = DOOR_COLOR
    line.Thickness = 2
    line.Transparency = 0.8
    return line
end

local function createDoorESP(door, roomId)
    if door:FindFirstChild("DoorESP") then return end
    local hl = Instance.new("Highlight")
    hl.Name = "DoorESP"
    hl.Adornee = door
    hl.FillColor = DOOR_COLOR
    hl.OutlineColor = DOOR_COLOR
    hl.FillTransparency = 0.5
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = door
    local bg = Instance.new("BillboardGui")
    bg.Name = "DoorESP"
    bg.Adornee = door
    bg.Size = UDim2.new(0, 120, 0, 40)
    bg.AlwaysOnTop = true
    bg.LightInfluence = 0
    bg.Parent = door
    local txt = Instance.new("TextLabel")
    txt.Size = UDim2.new(1,0,1,0)
    txt.BackgroundTransparency = 1
    txt.Font = Enum.Font.GothamBold
    txt.TextSize = 18
    txt.TextColor3 = DOOR_COLOR
    txt.TextStrokeTransparency = 0.5
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.Text = string.format("门 %d", roomId + 1)
    txt.Parent = bg
    local tracer = createDoorTracer()
    doorESPs[roomId] = {
        door = door,
        billboard = bg,
        highlight = hl,
        tracer = tracer
    }
end

local function updateDoorTracers()
    if not Toggles.DoorESP.Value then return end
    local player = Players.LocalPlayer
    if not player or not player.Character then return end
    local root = player.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    local playerPos = root.Position
    local camera = workspace.CurrentCamera
    for roomId, data in pairs(doorESPs) do
        if data.door and data.door.Parent then
            local doorPos = data.door.Position
            local screenPos, onScreen = camera:WorldToViewportPoint(doorPos)
            if onScreen then
                data.tracer.Visible = true
                data.tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
            else
                data.tracer.Visible = false
            end
        else
            if data.tracer then data.tracer:Remove() end
            doorESPs[roomId] = nil
        end
    end
end

local function scanForDoors()
    if not Toggles.DoorESP.Value then return end
    
    local now = tick()
    if now - lastDoorScan < DOOR_SCAN_INTERVAL then return end
    lastDoorScan = now
    
    for roomId = 0, MAX_DOORS do
        local room = workspace.CurrentRooms:FindFirstChild(tostring(roomId))
        if room then
            local doorFolder = room:FindFirstChild("Door")
            if doorFolder then
                local door = doorFolder:FindFirstChild("Door")
                if door and not doorESPs[roomId] then
                    createDoorESP(door, roomId)
                end
            end
        end
    end
end

-- 合并所有更新到一个心跳函数中
local function combinedUpdate(dt)
    updateTracers()
    scanForDoors()
    updateDoorTracers()
end

-- 创建一个统一的心跳连接
local combinedHeartbeat = RunService.Heartbeat:Connect(combinedUpdate)

workspace.CurrentRooms.ChildAdded:Connect(function(child)
    if tonumber(child.Name) then
        task.wait(0.5)
        scanForDoors()
    end
end)

local function cleanupDoors()
    for roomId, data in pairs(doorESPs) do
        if data.tracer then data.tracer:Remove() end
        if data.door and data.door:FindFirstChild("DoorESP") then
            data.door.DoorESP:Destroy()
        end
    end
    doorESPs = {}
end

HotelGroup:AddToggle("EntityESP", { Text = "实体透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ContainerESP", { Text = "柜子透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ChestESP", { Text = "宝箱透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("GoldESP", { Text = "金币透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("BookESP", { Text = "书透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("BreakerESP", { Text = "断路器透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("LeverESP", { Text = "拉杆透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ItemESP", { Text = "物品透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("PlayerESP", { Text = "玩家透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("KeyESP", { Text = "钥匙透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("ElectricalKeyESP", { Text = "电气室钥匙透视", Default = false, Callback = function() rescanObjects() end })
HotelGroup:AddToggle("DoorESP", { Text = "门透视", Default = false, Callback = function(on) if on then scanForDoors() else cleanupDoors() end end })
HotelGroup:AddToggle("ExtraItemsESP", { Text = "额外物品透视", Default = false, Callback = function() rescanObjects() end })

MineGroup:AddToggle("FuseESP", { Text = "保险丝透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("GeneratorESP", { Text = "发电机透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("AnchorESP", { Text = "锚透视", Default = false, Callback = function() rescanObjects() end })
MineGroup:AddToggle("PumpESP", { Text = "水泵透视", Default = false, Callback = function() rescanObjects() end })

BackdoorGroup:AddToggle("TimerESP", { Text = "计时器透视", Default = false, Callback = function() rescanObjects() end })

OutdoorGroup:AddToggle("OutdoorESP", { Text = "户外透视", Default = false, Callback = function(on) end })

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", { Default = Library.KeybindFrame.Visible, Text = "Open Keybind Menu", Callback = function(value) Library.KeybindFrame.Visible = value end })
MenuGroup:AddToggle("ShowCustomCursor", { Text = "Custom Cursor", Default = true, Callback = function(Value) Library.ShowCustomCursor = Value end })
MenuGroup:AddDropdown("NotificationSide", { Values = { "Left", "Right" }, Default = "Right", Text = "Notification Side", Callback = function(Value) Library:SetNotifySide(Value) end })
MenuGroup:AddDropdown("DPIDropdown", { Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" }, Default = "100%", Text = "DPI Scale", Callback = function(Value) Value = Value:gsub("%%", "") local DPI = tonumber(Value) Library:SetDPIScale(DPI) end })
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuGroup:AddButton("Unload", function() 
    Library:Unload() 
    cleanup() 
    cleanupDoors() 
    if autoInteractConnection then
        autoInteractConnection:Disconnect()
    end
    if combinedHeartbeat then
        combinedHeartbeat:Disconnect()
    end
    setBrightness(false)
    
    -- 清理 JumpButton
    if _G.JumpLoop then
        task.cancel(_G.JumpLoop)
        _G.JumpLoop = nil
    end
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

-- 初始化
local room = currentRoom()
if room then
    setupRoomListener(room)
end
for _,p in ipairs(Players:GetPlayers()) do
    if p ~= LocalPlayer then addPlayer(p) end
end
Players.PlayerAdded:Connect(function(p)
    if p ~= LocalPlayer then addPlayer(p) end
end)