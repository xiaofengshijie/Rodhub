local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Rodhub",
    Footer = "version: 1.0",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    ["透视"] = Window:AddTab("透视", "eye"),
    ["楼层"] = Window:AddTab("楼层", "layers"),
    ["反作弊"] = Window:AddTab("反作弊", "shield"),
    ["功能"] = Window:AddTab("功能", "flag"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings")
}

Tabs["透视"]:AddButton({
    Name = "",
    Callback = function()
        game.Players.LocalPlayer.Character.Humanoid.Jump = true
    end
})

local CF = CFrame.new
local LatestRoom = game:GetService("ReplicatedStorage").GameData.LatestRoom
local ChaseStart = game:GetService("ReplicatedStorage").GameData.ChaseStart

local KeyChams = {}

Tabs["透视"]:AddToggle({
    Name = "钥匙透视",
    Default = false,
    Flag = "KeyToggle",
    Save = true,
    Callback = function(Value)
        for i, v in pairs(KeyChams) do
            v.Enabled = Value
        end
    end
})

local function ApplyKeyChams(inst)
    wait()
    local Cham = Instance.new("Highlight")
    Cham.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    Cham.FillColor = Color3.new(0.980392, 0.670588, 0)
    Cham.FillTransparency = 0.5
    Cham.OutlineColor = Color3.new(0.792156, 0.792156, 0.792156)
    Cham.Parent = game:GetService("CoreGui")
    Cham.Adornee = inst
    Cham.Enabled = Library.Flags["KeyToggle"].Value
    Cham.RobloxLocked = true
    return Cham
end

local KeyCoroutine = coroutine.create(function()
    workspace.CurrentRooms.DescendantAdded:Connect(function(inst)
        if inst.Name == "KeyObtain" then
            table.insert(KeyChams, ApplyKeyChams(inst))
        end
    end)
end)

for i, v in ipairs(workspace:GetDescendants()) do
    if v.Name == "KeyObtain" then
        table.insert(KeyChams, ApplyKeyChams(v))
    end
end

coroutine.resume(KeyCoroutine)
