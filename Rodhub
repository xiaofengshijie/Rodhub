local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local getService = typeof(cloneref) == "function" and (function(name) return cloneref(game:GetService(name)) end) or (function(name) return game:GetService(name) end)
local Players = getService("Players")
local RunService = getService("RunService")
local UserInputService = getService("UserInputService")

local DrawingLib = typeof(Drawing) == "table" and Drawing or { noDrawing = true }
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local worldToViewport = function(...) camera = (camera or workspace.CurrentCamera); return camera:WorldToViewportPoint(...) end

Library.ESP = { Tracers = {} }
Library.Tracers = {
    Enabled = true,
    Set = function(self, bool) 
        if typeof(bool) == "boolean" then 
            self.Enabled = bool 
            Library.Flags.EnableTracers = bool 
        end 
    end,
    Color = Color3.new(1, 1, 1),
    Thickness = 2
}

Library.Rainbow = {
    Hue = 0,
    Color = Color3.new(),
    Enabled = false,
    Set = function(self, bool) 
        if typeof(bool) == "boolean" then 
            self.Enabled = bool 
            Library.Flags.RainbowEffect = bool 
        end 
    end
}

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Rodhub",
    Footer = "version: 1.0",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("功能", "视觉"),
    Key = Window:AddKeyTab("楼层"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local VisualGroupBox = Tabs.Main:AddLeftGroupbox("视觉设置")

VisualGroupBox:AddToggle("EnableTracers", {
    Text = "启用追踪线",
    Default = Library.Tracers.Enabled,
    Callback = function(Value)
        Library.Tracers:Set(Value)
    end
})

VisualGroupBox:AddToggle("RainbowEffect", {
    Text = "彩虹效果",
    Default = Library.Rainbow.Enabled,
    Callback = function(Value)
        Library.Rainbow:Set(Value)
    end
})

VisualGroupBox:AddColorPicker("TracerColor", {
    Text = "线条颜色",
    Default = Library.Tracers.Color,
    Callback = function(Value)
        Library.Tracers.Color = Value
    end
})

VisualGroupBox:AddSlider("TracerThickness", {
    Text = "线条粗细",
    Default = Library.Tracers.Thickness,
    Min = 1,
    Max = 10,
    Rounding = 0,
    Callback = function(Value)
        Library.Tracers.Thickness = Value
    end
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Features")

LeftGroupBox:AddToggle("Toggle1", {
    Text = "Enable Feature",
    Default = true,
    Callback = function(Value) end
}):AddColorPicker("Color1", {
    Default = Color3.new(1, 0, 0),
}):AddColorPicker("Color2", {
    Default = Color3.new(0, 1, 0),
})

LeftGroupBox:AddCheckbox("Check1", {
    Text = "Advanced Mode",
    Default = false,
})

LeftGroupBox:AddButton({
    Text = "Activate",
    Func = function() end
}):AddButton({
    Text = "Advanced Settings",
    DoubleClick = true,
})

LeftGroupBox:AddLabel("Status: Active")
LeftGroupBox:AddDivider()

LeftGroupBox:AddSlider("Slider1", {
    Text = "Intensity",
    Default = 50,
    Min = 0,
    Max = 100,
    Rounding = 0,
})

LeftGroupBox:AddInput("Input1", {
    Default = "Enter command...",
    Numeric = false
})

Library.Connections.Add(RunService.RenderStepped:Connect(function(dt)
    if not Library.Tracers.Enabled then return end
    
    if Library.Rainbow.Enabled then
        Library.Rainbow.Hue = (Library.Rainbow.Hue + dt) % 1
        Library.Rainbow.Color = Color3.fromHSV(Library.Rainbow.Hue, 1, 1)
    end

    for _, tracer in pairs(Library.ESP.Tracers) do
        if tracer and tracer.TracerInstance and not tracer.Deleted then
            local part = tracer.DistancePart
            if part and part.Parent then
                local partPos = part.Position
                local screenPos, onScreen = worldToViewport(partPos)
                
                if onScreen then
                    tracer.TracerInstance.Visible = true
                    tracer.TracerInstance.Color = Library.Rainbow.Enabled and Library.Rainbow.Color or Library.Tracers.Color
                    tracer.TracerInstance.Thickness = Library.Tracers.Thickness
                    tracer.TracerInstance.From = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
                    tracer.TracerInstance.To = Vector2.new(screenPos.X, screenPos.Y)
                else
                    tracer.TracerInstance.Visible = false
                end
            else
                tracer.Destroy()
            end
        end
    end
end))

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "ESP" })

ThemeManager:SetFolder("Rodhub")
SaveManager:SetFolder("Rodhub/config")

Library:Notify("Rodhub Loaded", 5)

Library:OnUnload(function()
    Library.Unloaded = true
    for _, tracer in pairs(Library.ESP.Tracers) do
        tracer.Destroy()
    end
end)

ThemeManager:Load()
SaveManager:Load()
