local repo = "https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

-- 初始化主窗口（初始时隐藏）
local Window = Library:CreateWindow({
    Title = "Rodhub（中文版）",
    Footer = "版本: 2.0",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
    Visible = false, -- 初始时隐藏窗口
})

-- 创建所有标签页
local VisualTab, gentab, chartab, survivortab, blatanttab, misctab = nil, nil, nil, nil, nil, nil

local function initializeTabs()
    VisualTab = Window:AddTab("视觉", "eye")
    gentab = Window:AddTab("生成器", "archive")
    chartab = Window:AddTab("杀手", "axe")
    survivortab = Window:AddTab("生存者", "key")
    blatanttab = Window:AddTab("显式", "laugh")
    misctab = Window:AddTab("其他", "meh")

-- 定义生成器标签页的左右分栏功能
    local leftGroup = gentab:AddLeftGroupbox("生成器功能")
    local rightGroup = gentab:AddRightGroupbox("高级功能")

    leftGroup:AddButton("瞬间解谜", function()
        instantsolvegen()
    end)

    leftGroup:AddButton("地狱模式瞬间解谜", function()
        instantsolvegenhell()
    end)

    leftGroup:AddButton("单次解谜", function()
        solvegen()
    end)

    rightGroup:AddToggle("自动解谜", {
        Default = false,
        Callback = function(state)
            autogen(state)
        end,
    })

    rightGroup:AddToggle("生成器高亮", {
        Default = false,
        Callback = function(state)
            toggleHighlightGen(state)
        end,
    })

    rightGroup:AddSlider("自动解谜延迟", {
        Default = 0.1,
        Min = 2.5,
        Max = 10,
        Rounding = 1,
        Suffix = "秒",
        Callback = function(value)
            delay = value
        end,
    })

    rightGroup:AddKeyPicker("执行当前解谜", {
        Default = "H",
        Callback = function()
            solvegen()
        end,
    })

    -- 视觉标签页功能
    local visualLeftGroup = VisualTab:AddLeftGroupbox("视觉功能")
    local visualRightGroup = VisualTab:AddRightGroupbox("高级视觉功能")

    visualLeftGroup:AddToggle("工具高亮", {
        Default = false,
        Callback = function(state)
            highlighttools(state)
        end,
    })

-- 视觉标签页功能
    local visualLeftGroup = VisualTab:AddLeftGroupbox("视觉功能")
    local visualRightGroup = VisualTab:AddRightGroupbox("高级视觉功能")

    visualLeftGroup:AddToggle("工具高亮", {
        Default = false,
        Callback = function(state)
            highlighttools(state)
        end,
    })

    visualLeftGroup:AddToggle("生存者高亮", {
        Default = false,
        Callback = function(state)
            survivorHighlighter(state)
        end,
    })

    visualRightGroup:AddToggle("杀手高亮", {
        Default = false,
        Callback = function(state)
            killerHighlighter(state)
        end,
    })

    visualRightGroup:AddToggle("自然腐化高亮", {
        Default = false,
        Callback = function(state)
            corruptnatureesp(state)
        end,
    })

    visualRightGroup:AddToggle("生存者工具高亮", {
        Default = false,
        Callback = function(state)
            survivorutilesp(state)
        end,
    })

    -- 杀手标签页功能
    local chartabLeftGroup = chartab:AddLeftGroupbox("杀手功能")
    chartabLeftGroup:AddButton("Hawk Tuah模式", function()
        hawktuahmode(true)
    end)

    -- 生存者标签页功能
    local survivortabLeftGroup = survivortab:AddLeftGroupbox("生存者功能")
    survivortabLeftGroup:AddButton("生存者功能1", function()
        -- 添加生存者相关功能
        print("执行生存者功能1")
    end)

    survivortabLeftGroup:AddButton("生存者功能2", function()
        -- 添加生存者相关功能
        print("执行生存者功能2")
    end)

    -- 显式标签页功能
    local blatanttabLeftGroup = blatanttab:AddLeftGroupbox("显式功能")
    blatanttabLeftGroup:AddButton("显式功能1", function()
        -- 添加显式相关功能
        print("执行显式功能1")
    end)

    blatanttabLeftGroup:AddButton("显式功能2", function()
        -- 添加显式相关功能
        print("执行显式功能2")
    end)

    -- 其他标签页功能
    local misctabLeftGroup = misctab:AddLeftGroupbox("其他功能")
    local misctabRightGroup = misctab:AddRightGroupbox("高级设置")

    misctabLeftGroup:AddButton("解锁客户端角色", function()
        unlockclientcharacters()
    end)

    misctabLeftGroup:AddToggle("隐藏玩家栏", {
        Default = false,
        Callback = function(state)
            togglehidebar(state)
        end,
    })

    misctabRightGroup:AddSlider("视野调整", {
        Default = 1,
        Min = 1,
        Max = 2,
        Rounding = 1,
        Suffix = ";",
        Callback = function(value)
            FOVmulti(value)
        end,
    })

    misctabRightGroup:AddKeyPicker("翻转", {
        Default = "~",
        Callback = function()
            flip()
        end,
    })

    -- 替换通知逻辑
    local function notify(title, content, duration)
        Library:Notify({
            Title = title,
            Description = content,
            Time = duration,
        })
    end

-- 发送通知
    notify("加入Discord", "请访问 https://discord.gg/fGFV3r9yKC", 60)
    notify("欢迎使用Rodhub", "请随时在服务器中发布任何错误或建议 :)", 10)
end

-- 卡密验证函数
local function validateKey(key)
    -- 示例卡密数据库（字母和数字组合）
    local keys = {
        ["KEY-ABC123"] = {Type = "Temporary", Expiry = os.time() + 60 * 60 * 24 * 7}, -- 7天后过期
        ["KEY-DEF456"] = {Type = "Permanent"}, -- 永久有效
        ["KEY-GHI789"] = {Type = "Temporary", Expiry = os.time() + 60 * 60 * 24 * 30}, -- 30天后过期
    }

    if not keys[key] then
        return false, "无效的卡密"
    end

    if keys[key].Type == "Temporary" and keys[key].Expiry < os.time() then
        return false, "卡密已过期"
    end

    if keys[key].Used then
        return false, "卡密已使用"
    end

    keys[key].Used = true
    return true, keys[key]
end

-- 应用卡密
local function applyKey(key)
    local success, result = validateKey(key)
    if success then
        if result.Type == "Permanent" then
            Library:Notify({
                Title = "成功",
                Description = "永久卡密已激活！",
                Time = 5,
            })
        else
            Library:Notify({
                Title = "成功",
                Description = "临时卡密已激活！有效期：" .. math.floor((result.Expiry - os.time()) / 86400) .. "天",
                Time = 5,
            })
        end
        Window:SetVisibility(true) -- 验证成功后显示主窗口
    else
        Library:Notify({
            Title = "错误",
            Description = result,
            Time = 5,
        })
    end
end

-- 创建卡密输入对话框
local function createKeyInputDialog()
    local keyInputWindow = Library:CreateWindow({
        Title = "Rodhub 卡密验证",
        Footer = "版本: 2.0",
        Icon = 95816097006870,
        NotifySide = "Right",
        ShowCustomCursor = true,
        Position = Vector2.new(500, 300),
        Size = Vector2.new(400, 200),
    })

    local keyInputGroup = keyInputWindow:AddTab("卡密验证", "key")

    keyInputGroup:AddInput("卡密输入", {
        Default = "",
        Numeric = false,
        Finished = true,
        ClearTextOnFocus = false,
        Text = "输入卡密",
        Tooltip = "输入您的卡密",
        Placeholder = "例如: KEY-ABC123",
        Callback = function(value)
            applyKey(value)
            keyInputWindow:Close() -- 验证后关闭对话框
        end,
    })

    keyInputGroup:AddButton("取消", function()
        keyInputWindow:Close() -- 关闭对话框
    end)
end

-- 定义功能函数
local function instantsolvegen()
    print("执行瞬间解谜")
end

local function instantsolvegenhell()
    print("执行地狱模式瞬间解谜")
end

local function solvegen()
    print("执行单次解谜")
end

local function autogen(state)
    run = state
    print("自动解谜已 " .. (state and "启用" or "禁用"))
end

local function toggleHighlightGen(state)
    isHighlightActive = state
    print("生成器高亮已 " .. (state and "启用" or "禁用"))
end

local function highlighttools(state)
    toolhighlightActive = state
    print("工具高亮已 " .. (state and "启用" or "禁用"))
end

local function survivorHighlighter(state)
    isSurvivorHighlightActive = state
    print("生存者高亮已 " .. (state and "启用" or "禁用"))
end

local function killerHighlighter(state)
    isKillerHighlightActive = state
    print("杀手高亮已 " .. (state and "启用" or "禁用"))
end

local function corruptnatureesp(state)
    isCorruptNatureEspActive = state
    print("自然腐化高亮已 " .. (state and "启用" or "禁用"))
end

local function survivorutilesp(state)
    isSurvivorUtilEspActive = state
    print("生存者工具高亮已 " .. (state and "启用" or "禁用"))
end

local function hawktuahmode(state)
    if player.Character.Name ~= "c00lkidd" then
        Library:Notify({
            Title = "错误",
            Description = "当前角色不是 Coolkid，可能会出现错误！",
            Time = 5,
        })
        return
    end
  end
    hawktuahactive = state
    print("Hawk Tuah模式已 " .. (state and "启用" or "禁用"))
end

local function unlockclientcharacters()
    print("解锁客户端角色")
end

local function togglehidebar(state)
    hideplayerbar = state
    print("玩家栏隐藏已 " .. (state and "启用" or "禁用"))
end

local function FOVmulti(value)
    print("视野已设置为: " .. value)
end

local function flip()
    print("执行翻转")
end

-- 定义全局变量
local isHighlightActive = false
local toolhighlightActive = false
local hawktuahactive = false
local isCorruptNatureEspActive = false
local isSurvivorUtilEspActive = false
local run = false
local delay = 0.1
local isSurvivorHighlightActive = false
local givepizza = false
local connections = {}
local isKillerHighlightActive = false
local hideplayerbar = false
local jumppowerenabled = false
local VirtualBallsManager = game:GetService('VirtualInputManager')

local player = game.Players.LocalPlayer

-- 初始化脚本
createKeyInputDialog() -- 创建卡密输入对话框
initializeTabs() -- 初始化标签页和功能
