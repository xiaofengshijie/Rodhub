local repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Options = Library.Options
local Toggles = Library.Toggles
Library.ShowToggleFrameInKeybinds = true
Library.ShowCustomCursor = true
Library.NotifySide = "Right"

local Window = Library:CreateWindow({
    Title = '增强型 Doors 辅助菜单',
    Center = true,
    AutoShow = true,
    Resizable = true,
    ShowCustomCursor = true,
    NotifySide = "Right",
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('主菜单'),
    ESP = Window:AddTab('ESP 设置'),
    Cheats = Window:AddTab('作弊功能'),
    ['界面设置'] = Window:AddTab('界面设置'),
}

-- 主菜单标签页
local MainLeftGroup = Tabs.Main:AddLeftGroupbox('自动功能')
local MainRightGroup = Tabs.Main:AddRightGroupbox('玩家功能')

MainLeftGroup:AddToggle('AutoInteract', {
    Text = '自动交互',
    Default = false,
    Tooltip = '自动与附近的物品交互',
    Callback = function(Value)
        -- 自动交互功能代码
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local Workspace = game:GetService("Workspace")
        local ProximityPromptService = game:GetService("ProximityPromptService")

        local player = Players.LocalPlayer
        local RANGE = 12.5
        local INTERVAL = 0.1

        local fireOk = pcall(function()
            fireproximityprompt(Instance.new("ProximityPrompt"))
        end)

        local autoInteractEnabled = Value
        local autoInteractConnection = nil

        local ignoredNames = {
            HidePrompt = true, ClimbPrompt = true, PushPrompt = true,
            InteractPrompt = true, PropPrompt = true,
            StarRiftPrompt = true, RiftPrompt = true
        }
        local ignoredParents = {
            Padlock = true, Seek_Arm = true, KeyObtainFake = true
        }

        local lastCheck = 0

        local function firePrompt(prompt)
            if not (prompt and prompt.Enabled) then return end
            if fireOk and fireproximityprompt then
                fireproximityprompt(prompt)
            else
                prompt:InputHoldBegin()
                task.wait(prompt.HoldDuration or 0)
                prompt:InputHoldEnd()
            end
        end

        local function onHeartbeat(dt)
            if not autoInteractEnabled then return end
            
            lastCheck = lastCheck + dt
            if lastCheck < INTERVAL then return end
            lastCheck = 0

            local char = player.Character
            if not char then return end
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if not hrp then return end
            local pos = hrp.Position

            for _, prompt in ipairs(Workspace:GetDescendants()) do
                if prompt:IsA("ProximityPrompt") and prompt.Enabled
                   and not ignoredNames[prompt.Name]
                   and not ignoredParents[prompt.Parent and prompt.Parent.Name or ""] then
                    
                    local part = prompt.Parent
                    if part:IsA("Model") then 
                        part = part:FindFirstChildWhichIsA("BasePart") 
                        if not part then goto continue end
                    end
                    
                    if part:IsA("BasePart") and (part.Position - pos).Magnitude <= RANGE then
                        firePrompt(prompt)
                    end
                end
                ::continue::
            end
        end

        if autoInteractEnabled then
            if autoInteractConnection then
                autoInteractConnection:Disconnect()
            end
            autoInteractConnection = RunService.Heartbeat:Connect(onHeartbeat)
        elseif autoInteractConnection then
            autoInteractConnection:Disconnect()
            autoInteractConnection = nil
        end
    end
}):AddKeyPicker('AutoInteractKey', {
    Default = 'R',
    NoUI = false,
    Text = '自动交互快捷键',
    Callback = function(key)
        if key == 'R' then
            Toggles.AutoInteract:SetValue(not Toggles.AutoInteract.Value)
        end
    end
})

MainLeftGroup:AddSlider('SpeedValue', {
    Text = '速度值',
    Default = 18,
    Min = 16,
    Max = 22,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        -- 速度值改变回调
        local targetSpeed = Value
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local player = Players.LocalPlayer
        
        if Toggles.SpeedBoost.Value and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = targetSpeed
            end
        end
    end
})

MainLeftGroup:AddToggle('SpeedBoost', {
    Text = '速度提升',
    Default = false,
    Tooltip = '增加移动速度',
    Callback = function(Value)
        -- 速度提升功能代码
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local player = Players.LocalPlayer

        local speedEnabled = Value
        local targetSpeed = Options.SpeedValue.Value
        local speedConnection = nil
        local characterAddedConnection = nil

        local function applySpeed(character)
            if not character then return end
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = targetSpeed
            end
        end

        local function onCharacterAdded(character)
            if speedEnabled then
                applySpeed(character)
            end
        end

        if speedEnabled then
            if speedConnection then
                speedConnection:Disconnect()
            end
            
            if characterAddedConnection then
                characterAddedConnection:Disconnect()
            end
            
            if player.Character then
                applySpeed(player.Character)
            end
            
            characterAddedConnection = player.CharacterAdded:Connect(onCharacterAdded)
            
            speedConnection = RunService.Heartbeat:Connect(function()
                if player.Character then
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.WalkSpeed ~= targetSpeed then
                        humanoid.WalkSpeed = targetSpeed
                    end
                end
            end)
        else
            if speedConnection then
                speedConnection:Disconnect()
                speedConnection = nil
            end
            
            if characterAddedConnection then
                characterAddedConnection:Disconnect()
                characterAddedConnection = nil
            end
            
            if player.Character then
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16
                end
            end
        end
    end
})

MainRightGroup:AddToggle('JumpButton', {
    Text = '强制跳跃',
    Default = false,
    Tooltip = '强制启用跳跃属性',
    Callback = function(Value)
        -- 强制跳跃功能代码
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local jumpConnections = {}

        local function setupJump()
            for _, conn in ipairs(jumpConnections) do
                conn:Disconnect()
            end
            jumpConnections = {}
            
            local char = player.Character
            if not char then return end
            
            char:SetAttribute("CanJump", true)
            
            local function fix()
                char:SetAttribute("CanJump", true)
            end
            
            table.insert(jumpConnections, char:GetAttributeChangedSignal("CanJump"):Connect(fix))
            table.insert(jumpConnections, player.CharacterAdded:Connect(function(newChar)
                task.wait(0.5)
                if newChar then
                    newChar:SetAttribute("CanJump", true)
                    table.insert(jumpConnections, newChar:GetAttributeChangedSignal("CanJump"):Connect(function()
                        newChar:SetAttribute("CanJump", true)
                    end))
                end
            end))
        end

        if Value then
            setupJump()
        else
            for _, conn in ipairs(jumpConnections) do
                conn:Disconnect()
            end
            jumpConnections = {}
            if player.Character and player.Character:GetAttribute("CanJump") ~= nil then
                player.Character:SetAttribute("CanJump", false)
            end
        end
    end
})

MainRightGroup:AddToggle('Brightness', {
    Text = '亮度增强',
    Default = false,
    Callback = function(Value)
        -- 亮度增强功能代码
        local Lighting = game:GetService("Lighting")
        local brightnessEnabled = Value
        local originalProperties = {}
        local brightnessConnection = nil

        local function saveOriginalProperties()
            originalProperties.GlobalShadows = Lighting.GlobalShadows
            originalProperties.Brightness = Lighting.Brightness
            originalProperties.ClockTime = Lighting.ClockTime
            originalProperties.FogEnd = Lighting.FogEnd
            originalProperties.OutdoorAmbient = Lighting.OutdoorAmbient
            originalProperties.ExposureCompensation = Lighting.ExposureCompensation
        end

        local function applyBrightnessImmediately()
            Lighting.GlobalShadows = false
            Lighting.Brightness = 6
            Lighting.ClockTime = 14
            Lighting.FogEnd = 1e6
            Lighting.OutdoorAmbient = Color3.fromRGB(192, 192, 192)
            Lighting.ExposureCompensation = 0.25
        end

        if brightnessEnabled then
            saveOriginalProperties()
            applyBrightnessImmediately()
            
            if brightnessConnection then
                brightnessConnection:Disconnect()
            end
            brightnessConnection = RunService.RenderStepped:Connect(function()
                applyBrightnessImmediately()
            end)
        else
            if brightnessConnection then
                brightnessConnection:Disconnect()
                brightnessConnection = nil
            end
            
            if originalProperties.GlobalShadows ~= nil then
                Lighting.GlobalShadows = originalProperties.GlobalShadows
                Lighting.Brightness = originalProperties.Brightness
                Lighting.ClockTime = originalProperties.ClockTime
                Lighting.FogEnd = originalProperties.FogEnd
                Lighting.OutdoorAmbient = originalProperties.OutdoorAmbient
                Lighting.ExposureCompensation = originalProperties.ExposureCompensation
            end
        end
    end
})

-- ESP 设置标签页
local ESPGroup = Tabs.ESP:AddLeftGroupbox('物品 ESP')
local EntityESPGroup = Tabs.ESP:AddRightGroupbox('实体 ESP')

ESPGroup:AddToggle('TracerESP', {
    Text = '追踪线 ESP',
    Default = false,
    Callback = function(Value)
        -- 追踪线 ESP 功能代码
        local tracerEnabled = Value
        local RunService = game:GetService("RunService")
        local tracerConnection = nil
        
        local function updateTracers()
            if not Workspace.CurrentCamera then return end
            
            for obj, data in pairs(tracerESPs) do
                if obj and obj.Parent and data.tracer then
                    local part = obj:IsA("BasePart") and obj or obj:FindFirstChildWhichIsA("BasePart")
                    if part then
                        local pos = part.Position
                        local screenPos, onScreen = Workspace.CurrentCamera:WorldToViewportPoint(pos)
                        
                        if onScreen and tracerEnabled then
                            data.tracer.From = Vector2.new(Workspace.CurrentCamera.ViewportSize.X / 2, Workspace.CurrentCamera.ViewportSize.Y)
                            data.tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                            data.tracer.Visible = true
                        else
                            data.tracer.Visible = false
                        end
                    else
                        data.tracer.Visible = false
                    end
                else
                    if data and data.tracer then
                        data.tracer:Remove()
                    end
                    tracerESPs[obj] = nil
                end
            end
        end

        if tracerEnabled then
            if tracerConnection then
                tracerConnection:Disconnect()
            end
            tracerConnection = RunService.RenderStepped:Connect(updateTracers)
        elseif tracerConnection then
            tracerConnection:Disconnect()
            tracerConnection = nil
            
            for _, data in pairs(tracerESPs) do
                if data.tracer then
                    data.tracer.Visible = false
                end
            end
        end
    end
})

ESPGroup:AddToggle('KeyESP', {
    Text = '钥匙 ESP',
    Default = false
})

ESPGroup:AddToggle('ElectricalKeyESP', {
    Text = '电钥匙 ESP',
    Default = false
})

ESPGroup:AddToggle('ContainerESP', {
    Text = '容器 ESP',
    Default = false
})

ESPGroup:AddToggle('BookESP', {
    Text = '书籍 ESP',
    Default = false
})

ESPGroup:AddToggle('LeverESP', {
    Text = '杠杆 ESP',
    Default = false
})

ESPGroup:AddToggle('BreakerESP', {
    Text = '断路器 ESP',
    Default = false
})

ESPGroup:AddToggle('TimerESP', {
    Text = '计时器 ESP',
    Default = false
})

ESPGroup:AddToggle('GeneratorESP', {
    Text = '发电机 ESP',
    Default = false
})

ESPGroup:AddToggle('FuseESP', {
    Text = '保险丝 ESP',
    Default = false
})

ESPGroup:AddToggle('ChestESP', {
    Text = '宝箱 ESP',
    Default = false
})

ESPGroup:AddToggle('GoldESP', {
    Text = '金币 ESP',
    Default = false
})

ESPGroup:AddToggle('ExtraItemsESP', {
    Text = '额外物品 ESP',
    Default = false
})

ESPGroup:AddToggle('ItemESP', {
    Text = '物品 ESP',
    Default = false
})

EntityESPGroup:AddToggle('EntityESP', {
    Text = '实体 ESP',
    Default = false,
    Callback = function(Value)
        -- 实体 ESP 功能代码
        local EspEntityNameDis = {
            ["FigureRig"] = "Figure",
            ["SallyMoving"] = "Window",
            ["RushMoving"] = "Rush",
            ["Eyes"] = "Eyes",
            ["Groundskeeper"] = "Skeeper",
            ["BackdoorLookman"] = "Lookman",
            ["BackdoorRush"] = "Blitz",
            ["MandrakeLive"] = "Mandrake",
            ["GloomPile"] = "Gloom",
            ["Snare"] = "Snare",
            ["GrumbleRig"] = "Grumble",
            ["GiggleCeiling"] = "Giggle",
            ["AmbushMoving"] = "Ambush"
        }

        local EntityAdd = {}
        local EntitySpawn, EntityRemove

        local function createTracer()
            local line = Drawing.new("Line")
            line.Visible = false
            line.Thickness = 2
            line.Transparency = 0.8
            return line
        end

        local function CreateESP(v)
            local highlight = Instance.new("Highlight")
            highlight.Name = "EntityESP"
            highlight.Adornee = v
            highlight.FillColor = Color3.fromRGB(255, 50, 50)
            highlight.OutlineColor = Color3.fromRGB(255, 50, 50)
            highlight.FillTransparency = 0.5
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Parent = v

            local billboard = Instance.new("BillboardGui")
            billboard.Name = "EntityESP"
            billboard.Adornee = v
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.AlwaysOnTop = true
            billboard.LightInfluence = 0
            billboard.Parent = v

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Font = Enum.Font.GothamBold
            textLabel.TextSize = 18
            textLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
            textLabel.TextStrokeTransparency = 0.5
            textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            textLabel.Text = EspEntityNameDis[v.Name] or v.Name
            textLabel.Parent = billboard

            EntityAdd[v] = {highlight, billboard}
            
            local tracer = createTracer()
            tracer.Color = Color3.fromRGB(255, 50, 50)
            tracerESPs[v] = {
                object = v,
                tracer = tracer,
                text = EspEntityNameDis[v.Name] or v.Name,
                color = Color3.fromRGB(255, 50, 50)
            }
        end

        local function RemoveESP(v)
            if EntityAdd[v] then
                for _, obj in ipairs(EntityAdd[v]) do
                    obj:Destroy()
                end
                EntityAdd[v] = nil
            end
            
            if tracerESPs[v] then
                if tracerESPs[v].tracer then
                    tracerESPs[v].tracer:Remove()
                end
                tracerESPs[v] = nil
            end
        end

        if Value then
            for _, v in pairs(workspace:GetDescendants()) do
                if EspEntityNameDis[v.Name] and v:IsA("Model") then
                    CreateESP(v)
                end
            end

            EntitySpawn = workspace.DescendantAdded:Connect(function(v)
                if EspEntityNameDis[v.Name] and v:IsA("Model") then
                    CreateESP(v)
                end
            end)

            EntityRemove = workspace.DescendantRemoving:Connect(function(v)
                if EntityAdd[v] then
                    RemoveESP(v)
                end
            end)
        else
            for v, _ in pairs(EntityAdd) do
                RemoveESP(v)
            end
            EntityAdd = {}

            if EntitySpawn then
                EntitySpawn:Disconnect()
                EntitySpawn = nil
            end
            if EntityRemove then
                EntityRemove:Disconnect()
                EntityRemove = nil
            end
        end
    end
})

-- 作弊功能标签页
local AntiBox = Tabs.Cheats:AddLeftGroupbox('反作弊')
local VisualBox = Tabs.Cheats:AddRightGroupbox('视觉设置')
local FOVBox = Tabs.Cheats:AddLeftGroupbox('FOV 设置')
local SpeedBypassGroup = Tabs.Cheats:AddRightGroupbox('速度绕过')

-- 添加移除功能
AntiBox:AddToggle("移除-Dupe", {
    Text    = "移除-Dupe",
    Default = false,
    Callback = function(on)
        if on then
            activate("移除-Dupe", "SideroomDupe", "room")
        else
            deactivate("移除-Dupe")
        end
    end,
})

AntiBox:AddToggle("移除-Snare", {
    Text    = "移除-Snare",
    Default = false,
    Callback = function(on)
        if on then
            activate("移除-Snare", "Snare", "room")
        else
            deactivate("移除-Snare")
        end
    end,
})

AntiBox:AddToggle('AntiScreech', {
    Text = '移除 Screech',
    Default = false,
    Callback = function(Value)
        -- 移除 Screech 功能代码
        local Players = game:GetService("Players")
        local Workspace = game:GetService("Workspace")
        local LocalPlayer = Players.LocalPlayer
        local WorkspaceCamera = Workspace.CurrentCamera

        if Value then
            local camKids = WorkspaceCamera:GetChildren()
            for i = 1, #camKids do
                if camKids[i].Name == "GlitchedScreech" then
                    camKids[i]:Destroy()
                end
            end
            screechCon = WorkspaceCamera.ChildAdded:Connect(function(child)
                if child.Name == "GlitchedScreech" then
                    child:Destroy()
                end
            end)
            local mods = LocalPlayer.PlayerGui
                :WaitForChild("MainUI")
                :WaitForChild("Initiator")
                :WaitForChild("Main_Game")
                :WaitForChild("RemoteListener")
                :WaitForChild("Modules")
            local mod = mods:FindFirstChild("Screech") or mods:FindFirstChild("_Screech")
            if mod then
                mod.Name = "_Screech"
            end
        else
            if screechCon then
                screechCon:Disconnect()
                screechCon = nil
            end
            local mods = LocalPlayer.PlayerGui
                :WaitForChild("MainUI")
                :WaitForChild("Initiator")
                :WaitForChild("Main_Game")
                :WaitForChild("RemoteListener")
                :WaitForChild("Modules")
            local mod = mods:FindFirstChild("_Screech") or mods:FindFirstChild("Screech")
            if mod then
                mod.Name = "Screech"
            end
        end
    end
})

AntiBox:AddToggle('AntiDread', {
    Text = '移除 Dread',
    Default = false,
    Callback = function(Value)
        -- 移除 Dread 功能代码
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        local mods = LocalPlayer.PlayerGui
            :WaitForChild("MainUI")
            :WaitForChild("Initiator")
            :WaitForChild("Main_Game")
            :WaitForChild("RemoteListener")
            :WaitForChild("Modules")
        local mod = mods:FindFirstChild("Dread") or mods:FindFirstChild("_Dread")
        if mod then
            mod.Name = Value and "_Dread" or "Dread"
        end
    end
})

AntiBox:AddToggle('AntiFigureHearing', {
    Text = '抗 Figure 听力',
    Default = false,
    Callback = function(Value)
        -- 抗 Figure 听力功能代码
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local LocalPlayer = Players.LocalPlayer

        local THROTTLE = 0.02
        
        if Value then
            local acc = 0
            hearingCon = RunService.Heartbeat:Connect(function(dt)
                acc = acc + dt
                if acc < THROTTLE then
                    return
                end
                acc = 0
                local remotes = ReplicatedStorage:FindFirstChild("RemotesFolder")
                remotes = remotes and remotes:FindFirstChild("Crouch")
                if remotes then
                    remotes:FireServer(true)
                end
            end)
        else
            if hearingCon then
                hearingCon:Disconnect()
                hearingCon = nil
            end
            local remotes = ReplicatedStorage:FindFirstChild("RemotesFolder")
            remotes = remotes and remotes:FindFirstChild("Crouch")
            if remotes then
                remotes:FireServer(false)
            end
        end
    end
})

AntiBox:AddToggle('AntiA90', {
    Text = '移除 A90',
    Default = false,
    Callback = function(Value)
        -- 移除 A90 功能代码
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        local mods = LocalPlayer.PlayerGui
            :WaitForChild("MainUI")
            :WaitForChild("Initiator")
            :WaitForChild("Main_Game")
            :WaitForChild("RemoteListener")
            :WaitForChild("Modules")
        local mod = mods:FindFirstChild("A90") or mods:FindFirstChild("_A90")
        if mod then
            mod.Name = Value and "_A90" or "A90"
        end
    end
})

VisualBox:AddToggle('AntiFog', {
    Text = '抗雾',
    Default = false,
    Callback = function(Value)
        -- 抗雾功能代码
        local Lighting = game:GetService("Lighting")
        local TweenService = game:GetService("TweenService")
        local atmosphere = Lighting:FindFirstChildOfClass("Atmosphere")
        
        if atmosphere then
            if Value then
                if cachedDensity == nil then
                    cachedDensity = atmosphere.Density
                end

                task.spawn(function()
                    while antiFogActive do
                        TweenService:Create(
                            atmosphere,
                            TweenInfo.new(0.5),
                            { Density = 0 }
                        ):Play()
                        task.wait(0.8)
                    end
                end)
            else
                if cachedDensity then
                    TweenService:Create(
                        atmosphere,
                        TweenInfo.new(0.5),
                        { Density = cachedDensity }
                    ):Play()
                end
            end
        end
    end
})

FOVBox:AddSlider('FOV', {
    Text = 'FOV',
    Min = 70,
    Max = 120,
    Default = 70,
    Rounding = 0,
    Callback = function(Value)
        targetFOV = Value
        if fovEnabled and not playingThinkAnimation then
            stepFOV()
        end
    end,
})

FOVBox:AddToggle('EnableFOV', {
    Text = '启用 FOV',
    Default = false,
    Callback = function(Value)
        fovEnabled = Value
        waitForCamera()

        if Value then
            currentFOV = camera.FieldOfView
            startEnforcing()
            if not playingThinkAnimation then
                stepFOV()
            end
        else
            stopEnforcing()
            targetFOV = 70
            stepFOV()
        end
    end,
})

SpeedBypassGroup:AddToggle('SpeedBypass', {
    Text = '速度绕过',
    Default = false,
    Tooltip = '绕过速度限制',
    Callback = function(Value)
        -- 速度绕过功能代码
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer

        local DEFAULT_WALK_SPEED_MAX = 22
        local speedBypassDelay = Options.SpeedBypassDelay.Value
        local OldAccel = nil
        local ClonedCollision = nil
        
        local function InitSpeedBypass()
            if not LocalPlayer.Character then return false end
            if not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return false end
            if not LocalPlayer.Character:FindFirstChild("Collision") then return false end

            OldAccel = LocalPlayer.Character.HumanoidRootPart.CustomPhysicalProperties
            ClonedCollision = LocalPlayer.Character.Collision:Clone()
            ClonedCollision.Name = "_CollisionClone"
            ClonedCollision.Massless = true
            ClonedCollision.Parent = LocalPlayer.Character
            ClonedCollision.CanCollide = false
            ClonedCollision.CanQuery = false
            ClonedCollision.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0.7, 0, 1, 1)
            return true
        end

        if Value then
            if not InitSpeedBypass() then
                Toggles.SpeedBypass:SetValue(false)
                return
            end
            
            local accumulator = 0
            speedBypassConnection = RunService.Heartbeat:Connect(function(dt)
                if Toggles.SpeedBypass.Value and ClonedCollision then
                    Options.SpeedValue:SetMax(35)
                    
                    accumulator = accumulator + dt
                    if accumulator >= speedBypassDelay then
                        accumulator = 0
                        ClonedCollision.Massless = not ClonedCollision.Massless
                    end
                    end
            end)
        else
            if speedBypassConnection then
                speedBypassConnection:Disconnect()
                speedBypassConnection = nil
            end
            
            Options.SpeedValue:SetMax(DEFAULT_WALK_SPEED_MAX)
            
            if ClonedCollision then
                ClonedCollion:Destroy()
                ClonedCollision = nil
            end
            
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CustomPhysicalProperties = OldAccel
            end
        end
    end
})

SpeedBypassGroup:AddSlider('SpeedBypassDelay', {
    Text = '速度绕过延迟',
    Default = 0.23,
    Min = 0.21,
    Max = 0.25,
    Rounding = 2,
    Compact = false,
    Callback = function(Value)
        speedBypassDelay = Value
    end
})

-- 界面设置标签页
local MenuGroup = Tabs['界面设置']:AddLeftGroupbox('菜单管理')
local ThemeGroup = Tabs['界面设置']:AddRightGroupbox('主题设置')

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "显示按键绑定菜单",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "自定义光标",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})

MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "通知位置",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})

MenuGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI 缩放",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI)
    end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("菜单快捷键"):AddKeyPicker("MenuKeybind", {
    Default = "RightShift",
    NoUI = true,
    Text = "菜单切换键"
})

MenuGroup:AddButton("卸载界面", function()
    Library:Unload()
end)

MenuGroup:AddButton("重置设置", function()
    Library:Notify("设置已重置")
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('Doors辅助菜单')
SaveManager:SetFolder('Doors辅助菜单/配置')
SaveManager:BuildConfigSection(Tabs['界面设置'])
ThemeManager:ApplyToTab(Tabs['界面设置'])

Library:SetWatermarkVisibility(true)
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60
local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter = FrameCounter + 1
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end
    Library:SetWatermark(('FPS: %s | 延迟: %s 毫秒 | Doors 辅助菜单'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end)

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    Library.Unloaded = true
end)

Library.ToggleKeybind = Options.MenuKeybind
SaveManager:LoadAutoloadConfig()
Library:Notify("Doors 辅助菜单加载成功! 通知位置应位于右侧。", 5)

-- 初始化全局变量
local tracerESPs = {}
local screechCon = nil
local hearingCon = nil
local cachedDensity = nil
local antiFogActive = false
local fovEnabled = false
local currentFOV = 70
local targetFOV = 70
local stepping = false
local fovConn = nil
local playingThinkAnimation = false
local camera = workspace.CurrentCamera
local speedBypassConnection = nil
local speedBypassDelay = 0.23

-- 移除功能相关的变量和函数
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local LatestRoomVal = GameData:WaitForChild("LatestRoom")
local CurrentRooms = Workspace:WaitForChild("CurrentRooms")
local listeners = {}

local function getCurrentRoom()
    local roomName = tostring(LatestRoomVal.Value)
    return CurrentRooms:FindFirstChild(roomName)
end

local function disableTransmitters(inst)
    pcall(function() inst:Destroy() end)
end

local function setupRemoval(root, targetName)
    if not root or not root:IsDescendantOf(Workspace) then
        return nil
    end

    -- Initial one-time scan
    for _, inst in ipairs(root:GetDescendants()) do
        if inst.Name == targetName then
            disableTransmitters(inst)
        end
    end

    -- Connect DescendantAdded to catch future spawns
    local conn = root.DescendantAdded:Connect(function(inst)
        if inst.Name == targetName then
            disableTransmitters(inst)
        end
    end)

    return conn
end

local function activate(id, targetName, scope)
    -- Clean up previous if any
    if listeners[id] then
        if listeners[id].conn then
            listeners[id].conn:Disconnect()
        end
        listeners[id] = nil
    end

    local root
    if scope == "global" then
        root = Workspace
    else
        root = getCurrentRoom()
        if not root then
            warn(("[RemoveToggle]%s打开，但找不到房间"):format(id))
            return
        end
    end

    -- One-time initial scan + DescendantAdded listener
    local conn = setupRemoval(root, targetName)
    if conn then
        listeners[id] = { conn = conn, root = root, targetName = targetName, scope = scope }
    else
        warn(("[RemoveToggle]%s：无法为%s设置删除"):format(id, targetName))
    end
end

local function deactivate(id)
    local data = listeners[id]
    if data then
        if data.conn then
            data.conn:Disconnect()
        end
        listeners[id] = nil
    end
end

-- On room change: re-activate any active toggles so listeners apply to new room
LatestRoomVal:GetPropertyChangedSignal("Value"):Connect(function()
    for id, data in pairs(listeners) do
        if data.scope == "room" then
            deactivate(id)
            activate(id, data.targetName, data.scope)
        end
    end
end)

local function waitForCamera()
    repeat
        camera = workspace.CurrentCamera
        task.wait(0.2)
    until camera
end

local function stepFOV()
    if stepping then return end
    stepping = true
    task.spawn(function()
        while stepping and currentFOV ~= targetFOV do
            local delta = targetFOV - currentFOV
            local step = (delta > 0 and 2) or -2
            if math.abs(delta) < 2 then
                step = delta
            end
            currentFOV = currentFOV + step
            camera.FieldOfView = currentFOV
            task.wait(0.009)
        end
        stepping = false
    end
end

local function startEnforcing()
    if fovConn then fovConn:Disconnect() end
    fovConn = camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
        if math.abs(camera.FieldOfView - currentFOV) > 0.1 then
            camera.FieldOfView = currentFOV
        end
    end)
    camera.FieldOfView = currentFOV
end

local function stopEnforcing()
    if fovConn then
        fovConn:Disconnect()
        fovConn = nil
    end
end

waitForCamera()

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
    waitForCamera()
    if fovEnabled then
        currentFOV = camera.FieldOfView
        startEnforcing()
        stepFOV()
    end
end)

workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
    waitForCamera()
    if fovEnabled then
        currentFOV = camera.FieldOfView
        startEnforcing()
        stepFOV()
    end
end)