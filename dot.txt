if game.Players.LocalPlayer.PlayerGui:FindFirstChild("LoadingUI") and game.Players.LocalPlayer.PlayerGui.LoadingUI.Enabled == true then
    repeat task.wait() until game.Players.LocalPlayer.PlayerGui.LoadingUI.Enabled == false
end

Screech, ClutchHeart, AutoUseCrouch = false, false, false
local old
old = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
    local args = {...}
    local method = getnamecallmethod()
    if tostring(self) == "Screech" and method == "FireServer" and Screech == true then
        args[1] = true
        return old(self,unpack(args))
    end
    if tostring(self) == "ClutchHeartbeat" and method == "FireServer" and ClutchHeart == true then
        args[2] = true
        return old(self,unpack(args))
    end
    if self.Name == "Crouch" and method == "FireServer" and AutoUseCrouch == true then
        args[1] = true
        return old(self,unpack(args))
    end
    return old(self,...)
end))

workspace.DescendantAdded:Connect(function(v)
    if v:IsA("Model") and v.Name == "Screech" then
        v:Destroy()
    end
end)

------ Script --------

local EntityModules = game:GetService("ReplicatedStorage").ModulesClient.EntityModules
local gameData = game.ReplicatedStorage:WaitForChild("GameData")
local floor = gameData:WaitForChild("Floor")
local isMines = floor.Value == "Mines"
local isHotel = floor.Value == "Hotel"
local isBackdoor = floor.Value == "Backdoor"
local isGarden = floor.Value == "Garden"

function Distance(pos)
    if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - pos).Magnitude
    end
end

_G.GetOldBright = {
    Brightness = game.Lighting.Brightness,
    ClockTime = game.Lighting.ClockTime,
    FogEnd = game.Lighting.FogEnd,
    GlobalShadows = game.Lighting.GlobalShadows,
    OutdoorAmbient = game.Lighting.OutdoorAmbient
}

---- LinoriaLib UI Setup ----

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Window = Library:CreateWindow({
    Title = "Doors",
    Footer = "Article Hub",
    Icon = 95816097006870,
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    Misc = Window:AddTab("Misc", "boxes"),
    Esp = Window:AddTab("Esp", "eye"),
    Information = Window:AddTab("Information", "info"),
    Settings = Window:AddTab("UI Settings", "settings"),
}

-- Main Tab
local MainLeft = Tabs.Main:AddLeftGroupbox("Visual")
local MainRight = Tabs.Main:AddRightGroupbox("Gameplay")

-- Fullbright
MainLeft:AddToggle("Fullbright", {
    Text = "Fullbright",
    Default = false,
    Tooltip = "Enables fullbright mode",
})

Toggles.Fullbright:OnChanged(function()
    _G.FullBright = Toggles.Fullbright.Value
    while _G.FullBright do
        game.Lighting.Brightness = 2
        game.Lighting.ClockTime = 14
        game.Lighting.FogEnd = 100000
        game.Lighting.GlobalShadows = false
        game.Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        task.wait()
    end
    for i, v in pairs(_G.GetOldBright) do
        game.Lighting[i] = v
    end
end)

-- No Fog
MainLeft:AddToggle("NoFog", {
    Text = "No Fog",
    Default = false,
    Tooltip = "Removes fog from the game",
})

Toggles.NoFog:OnChanged(function()
    _G.Nofog = Toggles.NoFog.Value
    while _G.Nofog do
        game:GetService("Lighting").FogStart = 100000
        game:GetService("Lighting").FogEnd = 200000
        for i, v in pairs(game:GetService("Lighting"):GetChildren()) do
            if v.ClassName == "Atmosphere" then
                v.Density = 0
                v.Haze = 0
            end
        end
        task.wait()
    end
    game:GetService("Lighting").FogStart = 0
    game:GetService("Lighting").FogEnd = 1000
    for i, v in pairs(game:GetService("Lighting"):GetChildren()) do
        if v.ClassName == "Atmosphere" then
            v.Density = 0.3
            v.Haze = 1
        end
    end
end)

-- Instant Prompt
MainLeft:AddToggle("InstantPrompt", {
    Text = "Instant Prompt",
    Default = false,
    Tooltip = "Makes all prompts instant",
})

Toggles.InstantPrompt:OnChanged(function()
    _G.NoCooldownProximity = Toggles.InstantPrompt.Value
    if _G.NoCooldownProximity == true then
        for i, v in pairs(workspace:GetDescendants()) do
            if v.ClassName == "ProximityPrompt" then
                v.HoldDuration = 0
            end
        end
        CooldownProximity = workspace.DescendantAdded:Connect(function(Cooldown)
            if _G.NoCooldownProximity == true then
                if Cooldown:IsA("ProximityPrompt") then
                    Cooldown.HoldDuration = 0
                end
            end
        end)
    else
        if CooldownProximity then
            CooldownProximity:Disconnect()
            CooldownProximity = nil
        end
    end
end)

MainLeft:AddDivider()
MainLeft:AddLabel("Misc Main")

-- Anti Screech
MainLeft:AddToggle("AntiScreech", {
    Text = "Anti Screech",
    Default = false,
    Tooltip = "Prevents Screech from affecting you",
})

Toggles.AntiScreech:OnChanged(function()
    _G.AntiScreech = Toggles.AntiScreech.Value
    Screech = Toggles.AntiScreech.Value
end)

-- Auto Clutch Heart Win
MainLeft:AddToggle("ClutchHeart", {
    Text = "Auto Clutch Heart Win",
    Default = false,
    Tooltip = "Automatically wins clutch heart events",
})

Toggles.ClutchHeart:OnChanged(function()
    ClutchHeart = Toggles.ClutchHeart.Value
end)

-- Anti Halt
MainLeft:AddToggle("AntiHalt", {
    Text = "Anti Halt",
    Default = false,
    Tooltip = "Prevents Halt from affecting you",
})

Toggles.AntiHalt:OnChanged(function()
    _G.NoHalt = Toggles.AntiHalt.Value
    local HaltShade = EntityModules:FindFirstChild("Shade") or EntityModules:FindFirstChild("_Shade")
    if HaltShade then
        HaltShade.Name = _G.NoHalt and "_Shade" or "Shade"
    end
end)

-- Anti Eyes / Lookman
MainLeft:AddToggle("AntiEyes", {
    Text = "Anti Eyes / Lookman",
    Default = false,
    Tooltip = "Prevents Eyes/Lookman from affecting you",
})

Toggles.AntiEyes:OnChanged(function()
    _G.NoEyes = Toggles.AntiEyes.Value
    while _G.NoEyes do
        if workspace:FindFirstChild("Eyes") or workspace:FindFirstChild("BackdoorLookman") then
            if game:GetService("ReplicatedStorage"):FindFirstChild("RemotesFolder") then
                game:GetService("ReplicatedStorage"):WaitForChild("RemotesFolder"):WaitForChild("MotorReplication"):FireServer(-649)
            end
        end
        task.wait()
    end
end)

-- Anti Egg Gloom (Mines only)
if isMines then
    MainLeft:AddToggle("AntiEggGloom", {
        Text = "Anti Egg Gloom",
        Default = false,
        Tooltip = "Prevents Gloom eggs from affecting you",
    })

    Toggles.AntiEggGloom:OnChanged(function()
        _G.AntiEggGloom = Toggles.AntiEggGloom.Value
        while _G.AntiEggGloom do
            for i, v in pairs(workspace.CurrentRooms:GetChildren()) do
                if v:IsA("Model") then
                    for _, v1 in pairs(v:GetChildren()) do
                        if v1.Name:find("GloomPile") and v1:FindFirstChild("GloomEgg") and v1.GloomEgg:FindFirstChild("Egg") then
                            v1.GloomEgg.Egg.CanTouch = false
                        end
                    end
                end
            end
            task.wait()
        end
    end)
end

-- Auto Use Crouch
MainRight:AddToggle("AutoUseCrouch", {
    Text = "Auto Use Crouch",
    Default = false,
    Tooltip = "Automatically uses crouch when needed",
})

Toggles.AutoUseCrouch:OnChanged(function()
    AutoUseCrouch = Toggles.AutoUseCrouch.Value
end)

-- Get Jump Button
MainRight:AddToggle("JumpButton", {
    Text = "Get Jump Button",
    Default = false,
    Tooltip = "Enables jumping ability",
})

Toggles.JumpButton:OnChanged(function()
    _G.JumpButton = Toggles.JumpButton.Value
    while _G.JumpButton do
        if game.Players.LocalPlayer.Character:GetAttribute("CanJump") then
            game.Players.LocalPlayer.Character:SetAttribute("CanJump", true)
        end
        task.wait()
    end 
    if game.Players.LocalPlayer.Character:GetAttribute("CanJump") then
        game.Players.LocalPlayer.Character:SetAttribute("CanJump", false)
    end
end)

-- Inf Oxygen
MainRight:AddToggle("InfOxygen", {
    Text = "Inf Oxygen",
    Default = false,
    Tooltip = "Gives you infinite oxygen",
})

Toggles.InfOxygen:OnChanged(function()
    _G.ActiveInfOxygen = Toggles.InfOxygen.Value
    while _G.ActiveInfOxygen do 
        if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") then
            game.Players.LocalPlayer.Character:SetAttribute("Oxygen",99999)
        end
        task.wait()
    end 
    if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") then
        game.Players.LocalPlayer.Character:SetAttribute("Oxygen",100)
    end
end)

-- Misc Tab
local MiscLeft = Tabs.Misc:AddLeftGroupbox("Notifications")
local MiscRight = Tabs.Misc:AddRightGroupbox("Utilities")

-- Entity Dropdown
local entityOptions = {"Rush", "Seek", "Eyes", "Window", "LookMan", "Gloombat", "Ambush", "A-60", "A-120"}
MiscLeft:AddDropdown("EntityChoose", {
    Values = entityOptions,
    Default = 1,
    Multi = true,
    Text = "Choose Entity",
    Tooltip = "Select which entities to notify about",
})

-- Notification Entity
MiscLeft:AddToggle("NotifyEntity", {
    Text = "Notification Entity",
    Default = false,
    Tooltip = "Notifies when selected entities spawn",
})

Toggles.NotifyEntity:OnChanged(function()
    _G.NotifyEntity = Toggles.NotifyEntity.Value
    if _G.NotifyEntity then
        EntityChild = workspace.ChildAdded:Connect(function(child)
            for _, v in ipairs(Options.EntityChoose.Value) do
                if child:IsA("Model") and child.Name:find(v) then
                    repeat task.wait() until not child:IsDescendantOf(workspace) or (game.Players.LocalPlayer:DistanceFromCharacter(child:GetPivot().Position) < 1000)
                    if child:IsDescendantOf(workspace) then
                        Library:Notify({
                            Title = v.." Spawn!!",
                            Content = "",
                            Duration = 5,
                        })
                        if _G.NotifyEntityChat then
                            local text = _G.ChatNotify or ""
                            game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(text..v.." Spawn!!")
                        end
                    end
                end
            end
        end)
    else
        if EntityChild then
            EntityChild:Disconnect()
            EntityChild = nil
        end
    end
end)

-- Auto Get Code Library (Hotel only)
if isHotel then
    MiscLeft:AddToggle("AutoGetCode", {
        Text = "Auto Get Code Library",
        Default = false,
        Tooltip = "Automatically gets library codes in Hotel",
    })

    Toggles.AutoGetCode:OnChanged(function()
        _G.NotifyEntity = Toggles.AutoGetCode.Value
        if _G.NotifyEntity then
            local function Deciphercode(v)
                local Hints = game.Players.LocalPlayer.PlayerGui:WaitForChild("PermUI"):WaitForChild("Hints")
                local code = {[1] = "_",[2] = "_", [3] = "_", [4] = "_", [5] = "_"}
                for i, v in pairs(v:WaitForChild("UI"):GetChildren()) do
                    if v:IsA("ImageLabel") and v.Name ~= "Image" then
                        for b, n in pairs(Hints:GetChildren()) do
                            if n:IsA("ImageLabel") and n.Visible and v.ImageRectOffset == n.ImageRectOffset then
                                code[tonumber(v.Name)] = n:FindFirstChild("TextLabel").Text 
                            end
                        end
                    end
                end 
                return code
            end
            
            local function CodeAll(v)
                if v:IsA("Tool") and v.Name == "LibraryHintPaper" then
                    local code = table.concat(Deciphercode(v))
                    if code then
                        Library:Notify({
                            Title = "Code: "..code,
                            Content = "",
                            Duration = 15,
                        })
                        if _G.NotifyEntityChat then
                            if not _G.ChatNotify then
                                TextChat = ""
                            else
                                TextChat = _G.ChatNotify
                            end
                            if TextChat then
                                game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(TextChat..code)
                            end
                        end
                    end
                end
            end
            
            Getpaper = game.Players.LocalPlayer.Character.ChildAdded:Connect(function(v)
                CodeAll(v)
            end)
        else
            if Getpaper then
                Getpaper:Disconnect()
                Getpaper = nil
            end
        end
    end)
end

-- Input Chat
MiscLeft:AddInput("ChatNotify", {
    Default = "",
    Numeric = false,
    Finished = false,
    Text = "Input Chat",
    Tooltip = "Text to prepend to chat notifications",
    Placeholder = "Your Chat...",
})

Options.ChatNotify:OnChanged(function()
    _G.ChatNotify = Options.ChatNotify.Value
end)

-- Notification Chat
MiscLeft:AddToggle("NotifyEntityChat", {
    Text = "Notification Chat",
    Default = false,
    Tooltip = "Sends notifications to chat",
})

Toggles.NotifyEntityChat:OnChanged(function()
    _G.NotifyEntityChat = Toggles.NotifyEntityChat.Value
end)

-- Hiding Transparency
MiscRight:AddSlider("TransparencyHide", {
    Text = "Hiding Transparency",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 1,
    Compact = false,
})

Options.TransparencyHide:OnChanged(function()
    _G.TransparencyHide = Options.TransparencyHide.Value
end)

-- Transparency Hiding
MiscRight:AddToggle("HidingTransparency", {
    Text = "Transparency Hiding",
    Default = false,
    Tooltip = "Makes hiding spots transparent",
})

Toggles.HidingTransparency:OnChanged(function()
    _G.HidingTransparency = Toggles.HidingTransparency.Value
    while _G.HidingTransparency do
        if game.Players.LocalPlayer.Character:GetAttribute("Hiding") then
            for _, v in pairs(workspace.CurrentRooms:GetDescendants()) do
                if v:IsA("ObjectValue") and v.Name == "HiddenPlayer" then
                    if v.Value == game.Players.LocalPlayer.Character then
                        local hidePart = {}
                        for _, i in pairs(v.Parent:GetChildren()) do
                            if i:IsA("BasePart") then
                                i.Transparency = _G.TransparencyHide or 0.5
                                table.insert(hidePart, i)
                            end
                        end
                        repeat task.wait()
                            for _, h in pairs(hidePart) do
                                h.Transparency = _G.TransparencyHide or 0.5
                                task.wait()
                            end
                        until not game.Players.LocalPlayer.Character:GetAttribute("Hiding") or not _G.HidingTransparency
                        for _, n in pairs(hidePart) do
                            n.Transparency = 0
                            task.wait()
                        end
                        break
                    end
                end
            end
        end
        task.wait()
    end
end)

-- Auto Loot
MiscRight:AddToggle("AutoLoot", {
    Text = "Auto Loot",
    Default = false,
    Tooltip = "Automatically collects loot items",
})

Toggles.AutoLoot:OnChanged(function()
    _G.AutoLoot = Toggles.AutoLoot.Value
    if _G.AutoLoot then
        lootables = {}
        local function LootCheck(v)
            if v:IsA("ProximityPrompt") and table.find(_G.Aura, v.Name) then
                table.insert(lootables, v)
            end
        end
        for _, v in ipairs(workspace:GetDescendants()) do
            LootCheck(v)
        end
        ChildAllNext = workspace.DescendantAdded:Connect(function(v)
            LootCheck(v)
        end)
        RemoveChild = workspace.DescendantRemoving:Connect(function(v)
            for i = #lootables, 1, -1 do
                if lootables[i] == v then
                    table.remove(lootables, i)
                    break
                end
            end
        end)
    else
        if ChildAllNext then
            ChildAllNext:Disconnect()
            ChildAllNext = nil
        end
        if RemoveChild then
            RemoveChild:Disconnect()
            RemoveChild = nil
        end
    end
    while _G.AutoLoot do
        for i, v in pairs(lootables) do
            if v:IsA("ProximityPrompt") and table.find(_G.Aura, v.Name) and v:GetAttribute("Interactions"..game.Players.LocalPlayer.Name) == nil then
                if v.Parent.Name:find("Mandrake") then return end
                if Distance(v.Parent:GetPivot().Position) <= 12 then
                    fireproximityprompt(v)
                end
            end
        end
        task.wait(0.1)
    end
end)

-- Walkspeed
MiscRight:AddSlider("WalkSpeedTp", {
    Text = "Walkspeed",
    Default = 16,
    Min = 16,
    Max = 21,
    Rounding = 1,
    Compact = false,
})

Options.WalkSpeedTp:OnChanged(function()
    _G.WalkSpeedTp = Options.WalkSpeedTp.Value
end)

-- WalkSpeed
MiscRight:AddToggle("SpeedWalk", {
    Text = "WalkSpeed",
    Default = false,
    Tooltip = "Increases walk speed",
})

Toggles.SpeedWalk:OnChanged(function()
    _G.SpeedWalk = Toggles.SpeedWalk.Value
    while _G.SpeedWalk do
        if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.WalkSpeedTp
        end
        task.wait()
    end
end)

-- ESP Tab
local EspLeft = Tabs.Esp:AddLeftGroupbox("ESP Settings")
local EspRight = Tabs.Esp:AddRightGroupbox("ESP Objects")

-- Key/Lever/Fuse ESP
if not isGarden then
    EspRight:AddToggle("EspKey", {
        Text = ((isHotel or isBackdoor) and "Esp Key / Lever") or (isMines and "Esp Fuse"),
        Default = false,
        Tooltip = "Shows keys/levers/fuses through walls",
    })

    Toggles.EspKey:OnChanged(function()
        _G.EspKey = Toggles.EspKey.Value
        if _G.EspKey == false then
            _G.KeyAdd = {}
            if KeySpawn then
                KeySpawn:Disconnect()
                KeySpawn = nil
            end
            if KeyRemove then
                KeyRemove:Disconnect()
                KeyRemove = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do 
                if v.Name:find("Key") or v.Name == "LeverForGate" or v.Name:find("FuseObtain") then
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        else
            function Keys(v)
                if ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v:FindFirstChild("Hitbox")) or (v.Name == "LeverForGate" and v.PrimaryPart) then
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight"):Destroy()
                    end
                    if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                        v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                                (_G.EspName == true and ((v.Name == "LeverForGate" and "Lever") or (v.Name:find("Key") and "Key") or (v.Name:find("FuseObtain") and "Fuse")) or "")..
                                (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance((v.Name == "LeverForGate" and v.PrimaryPart.Position) or ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v.Hitbox.Position))).."m)" or "")
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                    end
                    if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                        GuiEsp = Instance.new("BillboardGui", v)
                        GuiEsp.Adornee = v
                        GuiEsp.Name = "Esp_Gui"
                        GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                        GuiEsp.AlwaysOnTop = true
                        GuiEspText = Instance.new("TextLabel", GuiEsp)
                        GuiEspText.BackgroundTransparency = 1
                        GuiEspText.Font = Enum.Font.Code
                        GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                        GuiEspText.TextSize = 15
                        GuiEspText.TextColor3 = Color3.new(0,0,0) 
                        GuiEspText.TextStrokeTransparency = 0.5
                        GuiEspText.Text = ""
                        local UIStroke = Instance.new("UIStroke")
                        UIStroke.Color = Color3.new(0, 0, 0)
                        UIStroke.Thickness = 1.5
                        UIStroke.Parent = GuiEspText
                    elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                        v:FindFirstChild("Esp_Gui"):Destroy()
                    end
                end
            end
            local function CheckKey(v)
                if not table.find(_G.KeyAdd, v) and ((v.Name:find("Key") or v.Name:find("FuseObtain")) and v:FindFirstChild("Hitbox")) or (v.Name == "LeverForGate" and v.PrimaryPart) then
                    table.insert(_G.KeyAdd, v)
                end
            end
            for _, v in ipairs(workspace:GetDescendants()) do
                CheckKey(v)
            end
            KeySpawn = workspace.DescendantAdded:Connect(function(v)
                CheckKey(v)
            end)
            KeyRemove = workspace.DescendantRemoving:Connect(function(v)
                for i = #_G.KeyAdd, 1, -1 do
                    if _G.KeyAdd[i] == v then
                        table.remove(_G.KeyAdd, i)
                        break
                    end
                end
            end)
        end
        while _G.EspKey do
            for i, v in pairs(_G.KeyAdd) do
                if v:IsA("Model") then
                    Keys(v)
                end
            end
            task.wait()
        end
    end)
end

-- Door ESP
EspRight:AddToggle("EspDoor", {
    Text = "Esp Door",
    Default = false,
    Tooltip = "Shows doors through walls",
})

Toggles.EspDoor:OnChanged(function()
    _G.EspDoor = Toggles.EspDoor.Value
    if _G.EspDoor == false then
        for _, v in pairs(game.Workspace:FindFirstChild("CurrentRooms"):GetChildren()) do 
            if v:isA("Model") then
                for i, z in pairs(v:GetChildren()) do
                    if z.Name:find("Esp_") then
                        z:Destroy()
                    end
                end
            end
        end
    end
    while _G.EspDoor do
        for i, v in pairs(game.Workspace:FindFirstChild("CurrentRooms"):GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("Door") and v.Door:FindFirstChild("Door") then
                if v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                end
                if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                    local Highlight = Instance.new("Highlight")
                    Highlight.Name = "Esp_Highlight"
                    Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.FillTransparency = 0.5
                    Highlight.OutlineTransparency = 0
                    Highlight.Adornee = v.Door
                    Highlight.Parent = v
                elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight"):Destroy()
                end
                if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                    v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                            (_G.EspName == true and "Door "..((v.Door:FindFirstChild("Sign") and v.Door.Sign:FindFirstChild("Stinker") and v.Door.Sign.Stinker.Text) or (v.Door.Sign:FindFirstChild("SignText") and v.Door.Sign.SignText.Text)):gsub("^0+", "")..(v.Door:FindFirstChild("Lock") and " (lock)" or "") or "")..
                            (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.Door.Door.Position)).."m)" or "")
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                end
                if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                    GuiEsp = Instance.new("BillboardGui", v)
                    GuiEsp.Adornee = v.Door
                    GuiEsp.Name = "Esp_Gui"
                    GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                    GuiEsp.AlwaysOnTop = true
                    GuiEspText = Instance.new("TextLabel", GuiEsp)
                    GuiEspText.BackgroundTransparency = 1
                    GuiEspText.Font = Enum.Font.Code
                    GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                    GuiEspText.TextSize = 15
                    GuiEspText.TextColor3 = Color3.new(0,0,0) 
                    GuiEspText.TextStrokeTransparency = 0.5
                    GuiEspText.Text = ""
                    local UIStroke = Instance.new("UIStroke")
                    UIStroke.Color = Color3.new(0, 0, 0)
                    UIStroke.Thickness = 1.5
                    UIStroke.Parent = GuiEspText
                elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                    v:FindFirstChild("Esp_Gui"):Destroy()
                end
            end
        end
        task.wait()
    end
end)

-- Time Lever ESP (Backdoor only)
if isBackdoor then
    EspRight:AddToggle("EspLeverTime", {
        Text = "Esp Time Lever",
        Default = false,
        Tooltip = "Shows time levers through walls",
    })

    Toggles.EspLeverTime:OnChanged(function()
        _G.EspLeverTime = Toggles.EspLeverTime.Value
        if _G.EspLeverTime == false then
            _G.TimeLeverAdd = {}
            if TimeLeverSpawn then
                TimeLeverSpawn:Disconnect()
                TimeLeverSpawn = nil
            end
            if TimeLeverRemove then
                TimeLeverRemove:Disconnect()
                TimeLeverRemove = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do 
                if v.Name:find("TimerLever") then
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        else
            function LeverTimes(v)
                if v.Name:find("TimerLever") and v.PrimaryPart then
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                    
                    v:FindFirstChild("Esp_Highlight"):Destroy()
                end
                if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                    v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                            (_G.EspName == true and "Door "..((v.Door:FindFirstChild("Sign") and v.Door.Sign:FindFirstChild("Stinker") and v.Door.Sign.Stinker.Text) or (v.Door.Sign:FindFirstChild("SignText") and v.Door.Sign.SignText.Text)):gsub("^0+", "")..(v.Door:FindFirstChild("Lock") and " (lock)" or "") or "")..
                            (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.Door.Door.Position)).."m)" or "")
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                end
                if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                    GuiEsp = Instance.new("BillboardGui", v)
                    GuiEsp.Adornee = v.Door
                    GuiEsp.Name = "Esp_Gui"
                    GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                    GuiEsp.AlwaysOnTop = true
                    GuiEspText = Instance.new("TextLabel", GuiEsp)
                    GuiEspText.BackgroundTransparency = 1
                    GuiEspText.Font = Enum.Font.Code
                    GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                    GuiEspText.TextSize = 15
                    GuiEspText.TextColor3 = Color3.new(0,0,0) 
                    GuiEspText.TextStrokeTransparency = 0.5
                    GuiEspText.Text = ""
                    local UIStroke = Instance.new("UIStroke")
                    UIStroke.Color = Color3.new(0, 0, 0)
                    UIStroke.Thickness = 1.5
                    UIStroke.Parent = GuiEspText
                elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                    v:FindFirstChild("Esp_Gui"):Destroy()
                end
            end
        end
        task.wait()
    end
end)

-- Time Lever ESP (Backdoor only)
if isBackdoor then
    EspRight:AddToggle("EspLeverTime", {
        Text = "Esp Time Lever",
        Default = false,
        Tooltip = "Shows time levers through walls",
    })

    Toggles.EspLeverTime:OnChanged(function()
        _G.EspLeverTime = Toggles.EspLeverTime.Value
        if _G.EspLeverTime == false then
            _G.TimeLeverAdd = {}
            if TimeLeverSpawn then
                TimeLeverSpawn:Disconnect()
                TimeLeverSpawn = nil
            end
            if TimeLeverRemove then
                TimeLeverRemove:Disconnect()
                TimeLeverRemove = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do 
                if v.Name:find("TimerLever") then
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        else
            function LeverTimes(v)
                if v.Name:find("TimerLever") and v.PrimaryPart then
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight"):Destroy()
                    end
                    if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                        v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                                (_G.EspName == true and "Lever Time" or "")..
                                (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                    end
                    if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                        GuiEsp = Instance.new("BillboardGui", v)
                        GuiEsp.Adornee = v
                        GuiEsp.Name = "Esp_Gui"
                        GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                        GuiEsp.AlwaysOnTop = true
                        GuiEspText = Instance.new("TextLabel", GuiEsp)
                        GuiEspText.BackgroundTransparency = 1
                        GuiEspText.Font = Enum.Font.Code
                        GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                        GuiEspText.TextSize = 15
                        GuiEspText.TextColor3 = Color3.new(0,0,0) 
                        GuiEspText.TextStrokeTransparency = 0.5
                        GuiEspText.Text = ""
                        local UIStroke = Instance.new("UIStroke")
                        UIStroke.Color = Color3.new(0, 0, 0)
                        UIStroke.Thickness = 1.5
                        UIStroke.Parent = GuiEspText
                    elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                        v:FindFirstChild("Esp_Gui"):Destroy()
                    end
                end
            end
            local function CheckTimeLever(v)
                if not table.find(_G.TimeLeverAdd, v) and v.Name == "TimerLever" then
                    table.insert(_G.TimeLeverAdd, v)
                end
            end
            for _, v in ipairs(workspace:GetDescendants()) do
                CheckTimeLever(v)
            end
            TimeLeverSpawn = workspace.DescendantAdded:Connect(function(v)
                CheckTimeLever(v)
            end)
            TimeLeverRemove = workspace.DescendantRemoving:Connect(function(v)
                for i = #_G.TimeLeverAdd, 1, -1 do
                    if _G.TimeLeverAdd[i] == v then
                        table.remove(_G.TimeLeverAdd, i)
                        break
                    end
                end
            end)
        end
        while _G.EspLeverTime do
            for i, v in pairs(_G.TimeLeverAdd) do
                if v:IsA("Model") then
                    LeverTimes(v)
                end
            end
            task.wait()
            end
        end)
    end
end

-- Book ESP (Hotel only)
if isHotel then
    EspRight:AddToggle("EspBook", {
        Text = "Esp Book",
        Default = false,
        Tooltip = "Shows books through walls",
    })

    Toggles.EspBook:OnChanged(function()
        _G.EspBook = Toggles.EspBook.Value
        if _G.EspBook == false then
            _G.BookAdd = {}
            if BookSpawn then
                BookSpawn:Disconnect()
                BookSpawn = nil
            end
            if BookRemove then
                BookRemove:Disconnect()
                BookRemove = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do 
                if v.Name:find("LiveHintBook") then
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        else
            function Books(v)
                if v.Name:find("LiveHintBook") and v.PrimaryPart then
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight"):Destroy()
                    end
                    if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                        v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                                (_G.EspName == true and "Book" or "")..
                                (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                    end
                    if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                        GuiEsp = Instance.new("BillboardGui", v)
                        GuiEsp.Adornee = v
                        GuiEsp.Name = "Esp_Gui"
                        GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                        GuiEsp.AlwaysOnTop = true
                        GuiEspText = Instance.new("TextLabel", GuiEsp)
                        GuiEspText.BackgroundTransparency = 1
                        GuiEspText.Font = Enum.Font.Code
                        GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                        GuiEspText.TextSize = 15
                        GuiEspText.TextColor3 = Color3.new(0,0,0) 
                        GuiEspText.TextStrokeTransparency = 0.5
                        GuiEspText.Text = ""
                        local UIStroke = Instance.new("UIStroke")
                        UIStroke.Color = Color3.new(0, 0, 0)
                        UIStroke.Thickness = 1.5
                        UIStroke.Parent = GuiEspText
                    elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                        v:FindFirstChild("Esp_Gui"):Destroy()
                    end
                end
            end
            local function CheckBook(v)
                if not table.find(_G.BookAdd, v) and v.Name == "LiveHintBook" then
                    table.insert(_G.BookAdd, v)
                end
            end
            for _, v in
ipairs(workspace:GetDescendants()) do
                CheckBook(v)
            end
            BookSpawn = workspace.DescendantAdded:Connect(function(v)
                CheckBook(v)
            end)
            BookRemove = workspace.DescendantRemoving:Connect(function(v)
                for i = #_G.BookAdd, 1, -1 do
                    if _G.BookAdd[i] == v then
                        table.remove(_G.BookAdd, i)
                        break
                    end
                end
            end)
        end
        while _G.EspBook do
            for i, v in pairs(_G.BookAdd) do
                if v:IsA("Model") then
                    Books(v)
                end
            end
            task.wait()
        end
    end)
end

-- Breaker ESP (Hotel only)
if isHotel then
    EspRight:AddToggle("EspBreaker", {
        Text = "Esp Breaker",
        Default = false,
        Tooltip = "Shows breakers through walls",
    })

    Toggles.EspBreaker:OnChanged(function()
        _G.EspBreaker = Toggles.EspBreaker.Value
        if _G.EspBreaker == false then
            _G.BreakerAdd = {}
            if BreakerSpawn then
                BreakerSpawn:Disconnect()
                BreakerSpawn = nil
            end
            if BreakerRemove then
                BreakerRemove:Disconnect()
                BreakerRemove = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do 
                if v.Name:find("LiveBreakerPolePickup") then
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        else
            function Breakers(v)
                if v.Name == "LiveBreakerPolePickup" and v:FindFirstChildOfClass("ProximityPrompt") then
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight"):Destroy()
                    end
                    if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                        v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                                (_G.EspName == true and "Breaker" or "")..
                                (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                    end
                    if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                        GuiEsp = Instance.new("BillboardGui", v)
                        GuiEsp.Adornee = v
                        GuiEsp.Name = "Esp_Gui"
                        GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                        GuiEsp.AlwaysOnTop = true
                        GuiEspText = Instance.new("TextLabel", GuiEsp)
                        GuiEspText.BackgroundTransparency = 1
                        GuiEspText.Font = Enum.Font.Code
                        GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                        GuiEspText.TextSize = 15
                        GuiEspText.TextColor3 = Color3.new(0,0,0) 
                        GuiEspText.TextStrokeTransparency = 0.5
                        GuiEspText.Text = ""
                        local UIStroke = Instance.new("UIStroke")
                        UIStroke.Color = Color3.new(0, 0, 0)
                        UIStroke.Thickness = 1.5
                        UIStroke.Parent = GuiEspText
                    elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                        v:FindFirstChild("Esp_Gui"):Destroy()
                    end
                end
            end
            local function CheckBreaker(v)
                if not table.find(_G.BreakerAdd, v) and v.Name == "LiveBreakerPolePickup" then
                    table.insert(_G.BreakerAdd, v)
                end
            end
            for _, v in ipairs(workspace:GetDescendants()) do
                CheckBreaker(v)
            end
            BreakerSpawn = workspace.DescendantAdded:Connect(function(v)
                CheckBreaker(v)
            end)
            BreakerRemove = workspace.DescendantRemoving:Connect(function(v)
                for i = #_G.BreakerAdd, 1, -1 do
                    if _G.BreakerAdd[i] == v then
                        table.remove(_G.BreakerAdd, i)
                        break
                    end
                end
            end)
        end
        while _G.EspBreaker do
            for i, v in pairs(_G.BreakerAdd) do
                if v.Name == "LiveBreakerPolePickup" then
                    Breakers(v)
                end
            end
            task.wait()
        end
    end)
end

-- Item ESP
EspRight:AddToggle("EspItem", {
    Text = "Esp Item",
    Default = false,
    Tooltip = "Shows items through walls",
})

Toggles.EspItem:OnChanged(function()
    _G.EspItem = Toggles.EspItem.Value
    if _G.EspItem == false then
        _G.ItemAdd = {}
        if ItemSpawn then
            ItemSpawn:Disconnect()
            ItemSpawn = nil
        end
        if ItemRemove then
            ItemRemove:Disconnect()
            ItemRemove = nil
        end
        for _, v in pairs(workspace:GetDescendants()) do 
            if v.Name:find("Handle") then
                for i, z in pairs(v:GetChildren()) do
                    if z.Name:find("Esp_") then
                        z:Destroy()
                    end
                end
            end
        end
    else
        function Items(v)
            if v.Name == "Handle" and v.Parent:FindFirstChildOfClass("ProximityPrompt") then
                if v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                end
                if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                    local Highlight = Instance.new("Highlight")
                    Highlight.Name = "Esp_Highlight"
                    Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.FillTransparency = 0.5
                    Highlight.OutlineTransparency = 0
                    Highlight.Adornee = v.Parent
                    Highlight.Parent = v
                elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight"):Destroy()
                end
                if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                    v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                            (_G.EspName == true and v.Parent.Name or "")..
                            (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.Position)).."m)" or "")
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                end
                if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                    GuiEsp = Instance.new("BillboardGui", v)
                    GuiEsp.Adornee = v.Parent
                    GuiEsp.Name = "Esp_Gui"
                    GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                    GuiEsp.AlwaysOnTop = true
                    GuiEspText = Instance.new("TextLabel", GuiEsp)
                    GuiEspText.BackgroundTransparency = 1
                    GuiEspText.Font = Enum.Font.Code
                    GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                    GuiEspText.TextSize = 15
                    GuiEspText.TextColor3 = Color3.new(0,0,0) 
                    GuiEspText.TextStrokeTransparency = 0.5
                    GuiEspText.Text = ""
                    local UIStroke = Instance.new("UIStroke")
                    UIStroke.Color = Color3.new(0, 0, 0)
                    UIStroke.Thickness = 1.5
                    UIStroke.Parent = GuiEspText
                elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                    v:FindFirstChild("Esp_Gui"):Destroy()
                end
            end
        end
        local function CheckItem(v)
            if not table.find(_G.ItemAdd, v) and v.Name == "Handle" then
                table.insert(_G.ItemAdd, v)
            end
        end
        for _, v in ipairs(workspace:GetDescendants()) do
            CheckItem(v)
        end
        ItemSpawn = workspace.DescendantAdded:Connect(function(v)
            CheckItem(v)
        end)
        ItemRemove = workspace.DescendantRemoving:Connect(function(v)
            for i = #_G.ItemAdd, 1, -1 do
                if _G.ItemAdd[i] == v then
                    table.remove(_G.ItemAdd, i)
                    break
                end
            end
        end)
    end
    while _G.EspItem do
        for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:IsA("Tool") then
                for i, z in pairs(v:GetChildren()) do
                    if z.Name:find("Esp_") then
                        z:Destroy()
                    end
                end
            end
        end
        for i, v in pairs(_G.ItemAdd) do
            if v.Name == "Handle" then
                Items(v)
            end
        end
        task.wait()
    end
end)

-- Entity ESP
EspRight:AddToggle("EspEntity", {
    Text = "Esp Entity",
    Default = false,
    Tooltip = "Shows entities through walls",
})

Toggles.EspEntity:OnChanged(function()
    _G.EspEntity = Toggles.EspEntity.Value
    if _G.EspEntity == false then
        _G.EntityAdd = {}
        if EntitySpawn then
            EntitySpawn:Disconnect()
            EntitySpawn = nil
        end
        if EntityRemove then
            EntityRemove:Disconnect()
            EntityRemove = nil
        end
        for _, v in pairs(workspace:GetDescendants()) do 
            for x, z in pairs(_G.EspEntityNameDis) do
                if v:IsA("Model") and (v.Name == x) then
                    if v.PrimaryPart then
                        v.PrimaryPart.Transparency = 1
                    end
                    for i, z in pairs(v:GetChildren()) do
                        if z.Name:find("Esp_") then
                            z:Destroy()
                        end
                    end
                end
            end
        end
    else
        local function CheckEntity(v)
            for x, z in pairs(_G.EspEntityNameDis) do
                if v:IsA("Model") and (v.Name == x) then
                    if v.Name == "Snare" and v.Parent and v.Parent:IsA("Model") and v.Parent.Name == "Snare" then
                        return
                    end			
                    if not table.find(_G.EntityAdd, v) then
                        table.insert(_G.EntityAdd, v)
                    end
                end
            end
        end
        for _, v in ipairs(workspace:GetDescendants()) do
            CheckEntity(v)
        end
        EntitySpawn = workspace.DescendantAdded:Connect(function(v)
            CheckEntity(v)
        end)
        EntityRemove = workspace.DescendantRemoving:Connect(function(v)
            for i = #_G.EntityAdd, 1, -1 do
                if _G.EntityAdd[i] == v then
                    table.remove(_G.EntityAdd, i)
                    break
                end
            end
        end)
    end
    while _G.EspEntity do
        for i, v in pairs(_G.EntityAdd) do
            for x, z in pairs(_G.EspEntityNameDis) do
                if v:IsA("Model") and (v.Name == x) then
                    local AllTransparent = true
                    for _, v3 in ipairs(v:GetChildren()) do
                        if v3:IsA("BasePart") and v3.Transparency < 1 then
                            AllTransparent = false
                            break
                        end
                    end
                    if AllTransparent then
                        if v.PrimaryPart then
                            v.PrimaryPart.Transparency = 1
                        end
                    end
                    if v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                        v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    end
                    if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                        local Highlight = Instance.new("Highlight")
                        Highlight.Name = "Esp_Highlight"
                        Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                        Highlight.FillTransparency = 0.5
                        Highlight.OutlineTransparency = 0
                        Highlight.Adornee = v
                        Highlight.Parent = v
                    elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                        v:FindFirstChild("Esp_Highlight"):Destroy()
                    end
                    if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                        v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                                (_G.EspName == true and _G.EspEntityNameDis[v.Name] or "")..
                                (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                        v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                    end
                    if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                        GuiEsp = Instance.new("BillboardGui", v)
                        GuiEsp.Adornee = v
                        GuiEsp.Name = "Esp_Gui"
                        GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                        GuiEsp.AlwaysOnTop = true
                        GuiEspText = Instance.new("TextLabel", GuiEsp)
                        GuiEspText.BackgroundTransparency = 1
                        GuiEspText.Font = Enum.Font.Code
                        GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                        GuiEspText.TextSize = 15
                        GuiEspText.TextColor3 = Color3.new(0,0,0) 
                        GuiEspText.TextStrokeTransparency = 0.5
                        GuiEspText.Text = ""
                        local UIStroke = Instance.new("UIStroke")
                        UIStroke.Color = Color3.new(0, 0, 0)
                        UIStroke.Thickness = 1.5
                        UIStroke.Parent = GuiEspText
                    elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                        v:FindFirstChild("Esp_Gui"):Destroy()
                    end
                end
            end
        end
        task.wait()
    end
end)

-- Hiding Spots ESP
EspRight:AddToggle("EspHiding", {
    Text = "Esp Hiding Spots",
    Default = false,
    Tooltip = "Shows hiding spots through walls",
})

Toggles.EspHiding:OnChanged(function()
    _G.EspHiding = Toggles.EspHiding.Value
    if _G.EspHiding == false then
        _G.HidingAdd = {}
        if HidingSpawn then
            HidingSpawn:Disconnect()
            HidingSpawn = nil
        end
        if HidingRemove then
            HidingRemove:Disconnect()
            HidingRemove = nil
        end
        for _, v in pairs(workspace:GetDescendants()) do 
            if v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker" then
                for i, z in pairs(v:GetChildren()) do
                    if z.Name:find("Esp_") then
                        z:Destroy()
                    end
                end
            end
        end
    else
        function Hidings(v)
            if (v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker") and v.PrimaryPart then
                if v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                    v:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.fromRGB(255, 255, 255)
                end
                if _G.EspHighlight == true and v:FindFirstChild("Esp_Highlight") == nil then
                    local Highlight = Instance.new("Highlight")
                    Highlight.Name = "Esp_Highlight"
                    Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.FillTransparency = 0.5
                    Highlight.OutlineTransparency = 0
                    Highlight.Adornee = v
                    Highlight.Parent = v
                elseif _G.EspHighlight == false and v:FindFirstChild("Esp_Highlight") then
                    v:FindFirstChild("Esp_Highlight"):Destroy()
                end
                if v:FindFirstChild("Esp_Gui") and v["Esp_Gui"]:FindFirstChild("TextLabel") then
                    v["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                            (_G.EspName == true and v.Name or "")..
                            (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.PrimaryPart.Position)).."m)" or "")
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                    v["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                end
                if _G.EspGui == true and v:FindFirstChild("Esp_Gui") == nil then
                    GuiEsp = Instance.new("BillboardGui", v)
                    GuiEsp.Adornee = v
                    GuiEsp.Name = "Esp_Gui"
                    GuiEsp.Size = UDim2.new(0, 100, 0, 150)
                    GuiEsp.AlwaysOnTop = true
                    GuiEspText = Instance.new("TextLabel", GuiEsp)
                    GuiEspText.BackgroundTransparency = 1
                    GuiEspText.Font = Enum.Font.Code
                    GuiEspText.Size = UDim2.new(0, 100, 0, 100)
                    GuiEspText.TextSize = 15
                    GuiEspText.TextColor3 = Color3.new(0,0,0) 
                    GuiEspText.TextStrokeTransparency = 0.5
                    GuiEspText.Text = ""
                    local UIStroke = Instance.new("UIStroke")
                    UIStroke.Color = Color3.new(0, 0, 0)
                    UIStroke.Thickness = 1.5
                    UIStroke.Parent = GuiEspText
                elseif _G.EspGui == false and v:FindFirstChild("Esp_Gui") then
                    v:FindFirstChild("Esp_Gui"):Destroy()
                end
            end
        end
        local function CheckHiding(v)
            if not table.find(_G.HidingAdd, v) and v.Name == "Bed" or v.Name == "Wardrobe" or v.Name == "Backdoor_Wardrobe" or v.Name == "Locker_Large" or v.Name == "Rooms_Locker" then
                table.insert(_G.HidingAdd, v)
            end
        end
        for _, v in ipairs(workspace:GetDescendants()) do
            CheckHiding(v)
        end
        BookSpawn = workspace.DescendantAdded:Connect(function(v)
            CheckHiding(v)
        end)
        BookRemove = workspace.DescendantRemoving:Connect(function(v)
            for i = #_G.HidingAdd, 1, -1 do
                if _G.HidingAdd[i] == v then
                    table.remove(_G.HidingAdd, i)
                    break
                end
            end
        end)
    end
    while _G.EspHiding do
        for i, v in pairs(_G.HidingAdd) do
            if v:IsA("Model") then
                Hidings(v)
            end
        end
        task.wait()
    end
end)

-- Player ESP
EspRight:AddToggle("EspPlayer", {
    Text = "Esp Player",
    Default = false,
    Tooltip = "Shows players through walls",
})

Toggles.EspPlayer:OnChanged(function()
    _G.EspPlayer = Toggles.EspPlayer.Value
    if _G.EspPlayer == false then
        for i, v in pairs(game.Players:GetChildren()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                for x, b in pairs(v.Character:GetChildren()) do
                    if b.Name:find("Esp_") then
                        b:Destroy()
                    end
                end
            end
        end
    end
    while _G.EspPlayer do
        for i, v in pairs(game.Players:GetChildren()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") then
                if v.Character:FindFirstChild("Esp_Highlight") then
                    v.Character:FindFirstChild("Esp_Highlight").FillColor = _G.ColorLight or Color3.new(255, 255, 255)
                    v.Character:FindFirstChild("Esp_Highlight").OutlineColor = _G.ColorLight or Color3.new(255, 255, 255)
                end
                if _G.EspHighlight == true and v.Character:FindFirstChild("Esp_Highlight") == nil then
                    local Highlight = Instance.new("Highlight")
                    Highlight.Name = "Esp_Highlight"
                    Highlight.FillColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.OutlineColor = Color3.fromRGB(255, 255, 255) 
                    Highlight.FillTransparency = 0.5
                    Highlight.OutlineTransparency = 0
                    Highlight.Adornee = v.Character
                    Highlight.Parent = v.Character
                elseif _G.EspHighlight == false and v.Character:FindFirstChild("Esp_Highlight") then
                    v.Character:FindFirstChild("Esp_Highlight"):Destroy()
                end
                if v.Character:FindFirstChild("Esp_Gui") and v.Character["Esp_Gui"]:FindFirstChild("TextLabel") then
                    v.Character["Esp_Gui"]:FindFirstChild("TextLabel").Text = 
                            (_G.EspName == true and v.Name or "")..
                            (_G.EspDistance == true and "\nDistance ("..string.format("%.0f", Distance(v.Character.HumanoidRootPart.Position)).."m)" or "")..
                            (_G.EspHealth == true and "\nHealth [ "..(v.Character.Humanoid.Health <= 0 and "Dead" or string.format("%.0f", (v.Character.Humanoid.Health))).." ]" or "")
                    v.Character["Esp_Gui"]:FindFirstChild("TextLabel").TextSize = _G.EspGuiTextSize or 15
                    v.Character["Esp_Gui"]:FindFirstChild("TextLabel").TextColor3 = _G.EspGuiTextColor or Color3.new(255, 255, 255)
                end
                if _G.EspGui == true and v.Character:FindFirstChild("Esp_Gui") == nil then
                    GuiPlayerEsp = Instance.new("BillboardGui", v.Character)
                    GuiPlayerEsp.Adornee = v.Character.Head
                    GuiPlayerEsp.Name = "Esp_Gui"
                    GuiPlayerEsp.Size = UDim2.new(0, 100, 0, 150)
                    GuiPlayerEsp.AlwaysOnTop = true
                    GuiPlayerEsp.StudsOffset = Vector3.new(0, 3, 0)
                    GuiPlayerEspText = Instance.new("TextLabel", GuiPlayerEsp)
                    GuiPlayerEspText.BackgroundTransparency = 1
                    GuiPlayerEspText.Font = Enum.Font.Code
                    GuiPlayerEspText.Size = UDim2.new(0, 100, 0, 100)
                    GuiPlayerEspText.TextSize = 15
                    GuiPlayerEspText.TextColor3 = Color3.new(0,0,0) 
                    GuiPlayerEspText.TextStrokeTransparency = 0.5
                    GuiPlayerEspText.Text = ""
                    local UIStroke = Instance.new("UIStroke")
                    UIStroke.Color = Color3.new(0, 0, 0)
                    UIStroke.Thickness = 1.5
                    UIStroke.Parent = GuiPlayerEspText
                elseif _G.EspGui == false and v.Character:FindFirstChild("Esp_Gui") then
                    v.Character:FindFirstChild("Esp_Gui"):Destroy()
                end
            end
        end
        task.wait()
    end
end)

-- ESP Settings
EspLeft:AddLabel("Settings Esp")

EspLeft:AddToggle("EspGui", {
    Text = "Esp Gui",
    Default = false,
    Tooltip = "Shows GUI for ESP objects",
})

Toggles.EspGui:OnChanged(function()
    _G.EspGui = Toggles.EspGui.Value
end)

EspLeft:AddToggle("EspHighlight", {
    Text = "Esp HightLight",
    Default = false,
    Tooltip = "Shows highlight for ESP objects",
})

Toggles.EspHighlight:OnChanged(function()
    _G.EspHighlight = Toggles.EspHighlight.Value
end)

EspLeft:AddLabel("Settings Color")

EspLeft:AddColorPicker("EspGuiTextColor", {
    Title = "Color Gui",
    Default = Color3.fromRGB(255, 255, 255),
    Transparency = 0,
})

Options.EspGuiTextColor:OnChanged(function()
    _G.EspGuiTextColor = Options.EspGuiTextColor.Value
end)

EspLeft:AddColorPicker("ColorLight", {
    Title = "Color HightLight",
    Default = Color3.fromRGB(255, 255, 255),
    Transparency = 0,
})

Options.ColorLight:OnChanged(function()
    _G.ColorLight = Options.ColorLight.Value
end)

EspLeft:AddSlider("EspGuiTextSize", {
    Text = "Text Size [ Gui ]",
    Default = 10,
    Min = 5,
    Max = 50,
    Rounding = 1,
    Compact = false,
})

Options.EspGuiTextSize:OnChanged(function()
    _G.EspGuiTextSize = Options.EspGuiTextSize.Value
end)

EspLeft:AddLabel("Settings Text")

EspLeft:AddToggle("EspName", {
    Text = "Esp Name",
    Default = false,
    Tooltip = "Shows names for ESP objects",
})

Toggles.EspName:OnChanged(function()
    _G.EspName = Toggles.EspName.Value
end)

EspLeft:AddToggle("EspDistance", {
    Text = "Esp Distance",
    Default = false,
    Tooltip = "Shows distance for ESP objects",
})

Toggles.EspDistance:OnChanged(function()
    _G.EspDistance = Toggles.EspDistance.Value
end)

EspLeft:AddToggle("EspHealth", {
    Text = "Esp Health",
    Default = false,
    Tooltip = "Shows health for ESP objects",
})

Toggles.EspHealth:OnChanged(function()
    _G.EspHealth = Toggles.EspHealth.Value
end)

-- Information Tab
local InfoLeft = Tabs.Information:AddLeftGroupbox("Discord Info")

-- Discord Info
local InviteCode = "NE4fqyAStd"
local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"

local function LoadDiscordInfo()
    local success, result = pcall(function()
        return game:GetService("HttpService"):JSONDecode(game:HttpGet(DiscordAPI))
    end)

    if success and result and result.guild then
        InfoLeft:AddLabel(result.guild.name)
        InfoLeft:AddLabel("Member Count: " .. tostring(result.approximate_member_count))
        InfoLeft:AddLabel("Online Count: " .. tostring(result.approximate_presence_count))
        
        InfoLeft:AddButton("Update Info", function()
            local updated, updatedResult = pcall(function()
                return game:GetService("HttpService"):JSONDecode(game:HttpGet(DiscordAPI))
            end)

            if updated and updatedResult and updatedResult.guild then
                Library:Notify({
                    Title = "Discord Info Updated",
                    Content = "Member Count: " .. tostring(updatedResult.approximate_member_count) .. 
                             "\nOnline Count: " .. tostring(updatedResult.approximate_presence_count),
                    Duration = 5,
                })
            end
        end)

        InfoLeft:AddButton("Copy Discord Invite", function()
            setclipboard("https://discord.gg/" .. InviteCode)
            Library:Notify({
                Title = "Discord Invite Copied",
                Content = "Invite code has been copied to clipboard",
                Duration = 3,
            })
        end)
    else
        InfoLeft:AddLabel("Error fetching Discord Info")
    end
end

LoadDiscordInfo()

local InfoRight = Tabs.Information:AddRightGroupbox("Creator Info")

InfoRight:AddLabel("All Creator Hub")
InfoRight:AddDivider()
InfoRight:AddLabel("Nova Hoang (Nguyễn Nguyễn Tân Hoàng)")
InfoRight:AddLabel("Owner Of Article Hub and Nihahaha Hub")
InfoRight:AddDivider()
InfoRight:AddLabel("Giang Hub (Giang)")
InfoRight:AddLabel("Co-Owner Of Article Hub and Nihahaha Hub")

-- UI Settings Tab
local MenuGroup = Tabs.Settings:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Text = "Open Keybind Menu",
    Default = Library.KeybindFrame.Visible,
    Tooltip = "Toggles the keybind menu",
})

Toggles.KeybindMenuOpen:OnChanged(function(value)
    Library.KeybindFrame.Visible = value
end)

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Tooltip = "Toggles the custom cursor",
})

Toggles.ShowCustomCursor:OnChanged(function(Value)
    Library.ShowCustomCursor = Value
end)

MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Tooltip = "Changes the side of notifications",
})

Options.NotificationSide:OnChanged(function(Value)
    Library:SetNotifySide(Value)
end)

MenuGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI Scale",
    Tooltip = "Changes the DPI scale of the UI",
})

Options.DPIDropdown:OnChanged(function(Value)
    Value = Value:gsub("%%", "")
    local DPI = tonumber(Value)
    Library:SetDPIScale(DPI)
end)

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { 
    Default = "RightShift", 
    NoUI = true, 
    Text = "Menu keybind" 
})

Library.ToggleKeybind = Options.MenuKeybind

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

-- Addons
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

SaveManager:SetFolder("DoorsScript")
ThemeManager:SetFolder("DoorsScript")

SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)

SaveManager:LoadAutoloadConfig()
                   
                 